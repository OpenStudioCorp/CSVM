# Generated from CubeScript.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,73,875,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,1,0,5,0,62,8,0,10,0,12,0,65,9,0,1,
        0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,76,8,1,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,5,2,117,8,2,10,2,12,2,120,9,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,5,2,177,8,2,10,2,12,2,180,9,2,3,2,182,8,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,5,2,193,8,2,10,2,12,2,196,9,2,3,2,198,8,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,
        2,233,8,2,1,2,1,2,3,2,237,8,2,1,2,3,2,240,8,2,1,2,1,2,1,2,1,2,1,
        2,3,2,247,8,2,1,2,3,2,250,8,2,1,2,3,2,253,8,2,1,2,3,2,256,8,2,1,
        2,1,2,1,2,1,2,1,2,5,2,263,8,2,10,2,12,2,266,9,2,3,2,268,8,2,1,2,
        1,2,1,2,1,2,1,2,3,2,275,8,2,1,3,1,3,1,3,5,3,280,8,3,10,3,12,3,283,
        9,3,1,3,1,3,1,3,1,3,5,3,289,8,3,10,3,12,3,292,9,3,1,3,1,3,1,4,1,
        4,1,4,5,4,299,8,4,10,4,12,4,302,9,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
        5,5,311,8,5,10,5,12,5,314,9,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,3,6,323,
        8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,332,8,7,1,8,1,8,3,8,336,8,8,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,3,15,371,8,15,1,16,1,16,1,16,3,16,376,8,
        16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,3,18,385,8,18,1,18,1,18,1,
        18,1,18,1,18,1,18,5,18,393,8,18,10,18,12,18,396,9,18,3,18,398,8,
        18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
        19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,
        19,425,8,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,5,21,435,8,21,
        10,21,12,21,438,9,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,5,22,447,
        8,22,10,22,12,22,450,9,22,3,22,452,8,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,5,22,462,8,22,10,22,12,22,465,9,22,3,22,467,8,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,5,22,478,8,22,10,22,
        12,22,481,9,22,3,22,483,8,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        5,22,492,8,22,10,22,12,22,495,9,22,3,22,497,8,22,1,22,1,22,1,22,
        3,22,502,8,22,1,23,1,23,5,23,506,8,23,10,23,12,23,509,9,23,1,23,
        1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,545,8,24,10,24,12,24,548,
        9,24,3,24,550,8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,559,8,
        24,10,24,12,24,562,9,24,3,24,564,8,24,1,24,1,24,1,24,1,24,1,24,1,
        24,5,24,572,8,24,10,24,12,24,575,9,24,3,24,577,8,24,1,24,1,24,1,
        24,1,24,1,24,1,24,1,24,1,24,5,24,587,8,24,10,24,12,24,590,9,24,3,
        24,592,8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,601,8,24,10,
        24,12,24,604,9,24,3,24,606,8,24,1,24,1,24,1,24,1,24,1,24,1,24,5,
        24,614,8,24,10,24,12,24,617,9,24,3,24,619,8,24,1,24,1,24,1,24,1,
        24,1,24,1,24,1,24,5,24,628,8,24,10,24,12,24,631,9,24,3,24,633,8,
        24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
        24,1,24,1,24,5,24,650,8,24,10,24,12,24,653,9,24,3,24,655,8,24,1,
        24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,666,8,24,10,24,12,
        24,669,9,24,3,24,671,8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,5,24,684,8,24,10,24,12,24,687,9,24,3,24,689,8,24,
        1,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,698,8,24,10,24,12,24,701,
        9,24,3,24,703,8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        5,24,714,8,24,10,24,12,24,717,9,24,3,24,719,8,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,5,24,728,8,24,10,24,12,24,731,9,24,3,24,733,
        8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,758,
        8,24,10,24,12,24,761,9,24,3,24,763,8,24,1,24,1,24,3,24,767,8,24,
        1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,
        794,8,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,802,8,24,1,24,1,24,1,
        24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,817,8,
        24,10,24,12,24,820,9,24,3,24,822,8,24,1,24,1,24,1,24,1,24,3,24,828,
        8,24,1,24,1,24,1,24,1,24,3,24,834,8,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,3,24,844,8,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,
        852,8,24,10,24,12,24,855,9,24,1,24,1,24,1,24,5,24,860,8,24,10,24,
        12,24,863,9,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,
        1,29,1,853,1,48,30,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
        34,36,38,40,42,44,46,48,50,52,54,56,58,0,6,1,0,28,31,2,0,17,17,32,
        40,2,0,8,8,44,56,2,0,41,41,57,57,3,0,5,5,7,7,58,61,3,0,66,67,69,
        71,73,73,1002,0,63,1,0,0,0,2,75,1,0,0,0,4,274,1,0,0,0,6,276,1,0,
        0,0,8,295,1,0,0,0,10,306,1,0,0,0,12,317,1,0,0,0,14,324,1,0,0,0,16,
        335,1,0,0,0,18,337,1,0,0,0,20,347,1,0,0,0,22,355,1,0,0,0,24,357,
        1,0,0,0,26,359,1,0,0,0,28,361,1,0,0,0,30,370,1,0,0,0,32,372,1,0,
        0,0,34,377,1,0,0,0,36,384,1,0,0,0,38,424,1,0,0,0,40,426,1,0,0,0,
        42,430,1,0,0,0,44,501,1,0,0,0,46,503,1,0,0,0,48,766,1,0,0,0,50,864,
        1,0,0,0,52,866,1,0,0,0,54,868,1,0,0,0,56,870,1,0,0,0,58,872,1,0,
        0,0,60,62,3,2,1,0,61,60,1,0,0,0,62,65,1,0,0,0,63,61,1,0,0,0,63,64,
        1,0,0,0,64,66,1,0,0,0,65,63,1,0,0,0,66,67,5,0,0,1,67,1,1,0,0,0,68,
        76,3,4,2,0,69,76,3,12,6,0,70,71,3,34,17,0,71,72,3,48,24,0,72,76,
        1,0,0,0,73,76,5,64,0,0,74,76,3,42,21,0,75,68,1,0,0,0,75,69,1,0,0,
        0,75,70,1,0,0,0,75,73,1,0,0,0,75,74,1,0,0,0,76,3,1,0,0,0,77,275,
        3,40,20,0,78,275,3,42,21,0,79,80,5,1,0,0,80,81,5,73,0,0,81,275,3,
        46,23,0,82,83,5,2,0,0,83,84,5,73,0,0,84,275,3,46,23,0,85,275,3,36,
        18,0,86,87,5,3,0,0,87,88,5,4,0,0,88,89,5,73,0,0,89,90,5,5,0,0,90,
        91,5,73,0,0,91,92,5,6,0,0,92,275,3,46,23,0,93,94,5,3,0,0,94,95,5,
        4,0,0,95,96,5,73,0,0,96,97,5,7,0,0,97,98,5,73,0,0,98,99,5,6,0,0,
        99,275,3,46,23,0,100,101,5,71,0,0,101,102,5,73,0,0,102,103,5,8,0,
        0,103,104,3,44,22,0,104,105,5,9,0,0,105,275,1,0,0,0,106,107,3,44,
        22,0,107,108,5,9,0,0,108,275,1,0,0,0,109,110,5,10,0,0,110,111,5,
        4,0,0,111,112,3,48,24,0,112,113,5,6,0,0,113,118,5,11,0,0,114,117,
        3,10,5,0,115,117,3,8,4,0,116,114,1,0,0,0,116,115,1,0,0,0,117,120,
        1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,119,121,1,0,0,0,120,118,
        1,0,0,0,121,122,5,12,0,0,122,275,1,0,0,0,123,124,5,73,0,0,124,125,
        5,8,0,0,125,126,3,48,24,0,126,127,5,9,0,0,127,275,1,0,0,0,128,129,
        5,71,0,0,129,130,5,73,0,0,130,131,5,8,0,0,131,132,3,48,24,0,132,
        133,5,9,0,0,133,275,1,0,0,0,134,135,5,71,0,0,135,136,5,73,0,0,136,
        137,5,8,0,0,137,138,3,44,22,0,138,139,5,9,0,0,139,275,1,0,0,0,140,
        141,5,71,0,0,141,142,5,73,0,0,142,143,5,8,0,0,143,144,3,44,22,0,
        144,145,5,9,0,0,145,275,1,0,0,0,146,147,5,71,0,0,147,148,5,73,0,
        0,148,149,5,8,0,0,149,150,3,44,22,0,150,151,5,13,0,0,151,152,5,73,
        0,0,152,153,5,9,0,0,153,275,1,0,0,0,154,155,5,71,0,0,155,156,5,73,
        0,0,156,157,5,63,0,0,157,158,5,8,0,0,158,159,3,48,24,0,159,160,5,
        9,0,0,160,275,1,0,0,0,161,162,5,71,0,0,162,163,5,73,0,0,163,164,
        5,63,0,0,164,165,5,8,0,0,165,166,3,44,22,0,166,167,5,9,0,0,167,275,
        1,0,0,0,168,169,5,71,0,0,169,170,5,73,0,0,170,171,5,63,0,0,171,172,
        5,8,0,0,172,181,5,14,0,0,173,178,3,48,24,0,174,175,5,15,0,0,175,
        177,3,48,24,0,176,174,1,0,0,0,177,180,1,0,0,0,178,176,1,0,0,0,178,
        179,1,0,0,0,179,182,1,0,0,0,180,178,1,0,0,0,181,173,1,0,0,0,181,
        182,1,0,0,0,182,183,1,0,0,0,183,184,5,16,0,0,184,275,5,9,0,0,185,
        186,5,73,0,0,186,187,5,63,0,0,187,188,5,8,0,0,188,197,5,14,0,0,189,
        194,3,48,24,0,190,191,5,15,0,0,191,193,3,48,24,0,192,190,1,0,0,0,
        193,196,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,198,1,0,0,0,
        196,194,1,0,0,0,197,189,1,0,0,0,197,198,1,0,0,0,198,199,1,0,0,0,
        199,200,5,16,0,0,200,275,5,9,0,0,201,202,5,73,0,0,202,203,5,63,0,
        0,203,204,5,8,0,0,204,205,3,44,22,0,205,206,5,9,0,0,206,275,1,0,
        0,0,207,208,5,71,0,0,208,209,5,73,0,0,209,210,5,8,0,0,210,211,3,
        44,22,0,211,212,5,9,0,0,212,275,1,0,0,0,213,214,5,73,0,0,214,215,
        5,8,0,0,215,216,3,44,22,0,216,217,5,9,0,0,217,275,1,0,0,0,218,219,
        5,71,0,0,219,220,5,73,0,0,220,221,5,8,0,0,221,222,3,44,22,0,222,
        223,5,9,0,0,223,275,1,0,0,0,224,225,5,71,0,0,225,226,5,73,0,0,226,
        227,5,63,0,0,227,228,5,8,0,0,228,229,3,44,22,0,229,230,5,9,0,0,230,
        275,1,0,0,0,231,233,5,73,0,0,232,231,1,0,0,0,232,233,1,0,0,0,233,
        234,1,0,0,0,234,236,5,71,0,0,235,237,5,73,0,0,236,235,1,0,0,0,236,
        237,1,0,0,0,237,239,1,0,0,0,238,240,5,63,0,0,239,238,1,0,0,0,239,
        240,1,0,0,0,240,241,1,0,0,0,241,242,5,8,0,0,242,243,3,44,22,0,243,
        244,5,9,0,0,244,275,1,0,0,0,245,247,5,73,0,0,246,245,1,0,0,0,246,
        247,1,0,0,0,247,249,1,0,0,0,248,250,3,58,29,0,249,248,1,0,0,0,249,
        250,1,0,0,0,250,252,1,0,0,0,251,253,5,73,0,0,252,251,1,0,0,0,252,
        253,1,0,0,0,253,255,1,0,0,0,254,256,5,63,0,0,255,254,1,0,0,0,255,
        256,1,0,0,0,256,257,1,0,0,0,257,258,5,8,0,0,258,267,5,14,0,0,259,
        264,3,48,24,0,260,261,5,15,0,0,261,263,3,48,24,0,262,260,1,0,0,0,
        263,266,1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,268,1,0,0,0,
        266,264,1,0,0,0,267,259,1,0,0,0,267,268,1,0,0,0,268,269,1,0,0,0,
        269,270,5,16,0,0,270,275,5,9,0,0,271,272,5,17,0,0,272,273,5,73,0,
        0,273,275,3,46,23,0,274,77,1,0,0,0,274,78,1,0,0,0,274,79,1,0,0,0,
        274,82,1,0,0,0,274,85,1,0,0,0,274,86,1,0,0,0,274,93,1,0,0,0,274,
        100,1,0,0,0,274,106,1,0,0,0,274,109,1,0,0,0,274,123,1,0,0,0,274,
        128,1,0,0,0,274,134,1,0,0,0,274,140,1,0,0,0,274,146,1,0,0,0,274,
        154,1,0,0,0,274,161,1,0,0,0,274,168,1,0,0,0,274,185,1,0,0,0,274,
        201,1,0,0,0,274,207,1,0,0,0,274,213,1,0,0,0,274,218,1,0,0,0,274,
        224,1,0,0,0,274,232,1,0,0,0,274,246,1,0,0,0,274,271,1,0,0,0,275,
        5,1,0,0,0,276,277,5,10,0,0,277,281,5,4,0,0,278,280,3,48,24,0,279,
        278,1,0,0,0,280,283,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,
        284,1,0,0,0,283,281,1,0,0,0,284,285,5,6,0,0,285,290,5,11,0,0,286,
        289,3,10,5,0,287,289,3,8,4,0,288,286,1,0,0,0,288,287,1,0,0,0,289,
        292,1,0,0,0,290,288,1,0,0,0,290,291,1,0,0,0,291,293,1,0,0,0,292,
        290,1,0,0,0,293,294,5,12,0,0,294,7,1,0,0,0,295,296,5,18,0,0,296,
        300,5,19,0,0,297,299,3,4,2,0,298,297,1,0,0,0,299,302,1,0,0,0,300,
        298,1,0,0,0,300,301,1,0,0,0,301,303,1,0,0,0,302,300,1,0,0,0,303,
        304,5,20,0,0,304,305,5,9,0,0,305,9,1,0,0,0,306,307,5,21,0,0,307,
        308,3,48,24,0,308,312,5,19,0,0,309,311,3,4,2,0,310,309,1,0,0,0,311,
        314,1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,315,1,0,0,0,314,
        312,1,0,0,0,315,316,5,20,0,0,316,11,1,0,0,0,317,318,5,22,0,0,318,
        319,3,48,24,0,319,322,3,46,23,0,320,321,5,23,0,0,321,323,3,16,8,
        0,322,320,1,0,0,0,322,323,1,0,0,0,323,13,1,0,0,0,324,325,5,22,0,
        0,325,326,5,4,0,0,326,327,3,48,24,0,327,328,5,6,0,0,328,331,3,46,
        23,0,329,330,5,23,0,0,330,332,3,46,23,0,331,329,1,0,0,0,331,332,
        1,0,0,0,332,15,1,0,0,0,333,336,3,46,23,0,334,336,3,12,6,0,335,333,
        1,0,0,0,335,334,1,0,0,0,336,17,1,0,0,0,337,338,5,3,0,0,338,339,5,
        4,0,0,339,340,3,40,20,0,340,341,5,9,0,0,341,342,3,48,24,0,342,343,
        5,9,0,0,343,344,3,40,20,0,344,345,5,6,0,0,345,346,3,46,23,0,346,
        19,1,0,0,0,347,348,5,24,0,0,348,349,5,4,0,0,349,350,5,73,0,0,350,
        351,5,25,0,0,351,352,5,73,0,0,352,353,5,6,0,0,353,354,3,46,23,0,
        354,21,1,0,0,0,355,356,5,26,0,0,356,23,1,0,0,0,357,358,5,27,0,0,
        358,25,1,0,0,0,359,360,7,0,0,0,360,27,1,0,0,0,361,362,7,1,0,0,362,
        29,1,0,0,0,363,364,5,71,0,0,364,365,5,73,0,0,365,366,5,8,0,0,366,
        371,3,48,24,0,367,368,5,73,0,0,368,369,5,8,0,0,369,371,3,48,24,0,
        370,363,1,0,0,0,370,367,1,0,0,0,371,31,1,0,0,0,372,375,5,73,0,0,
        373,376,3,22,11,0,374,376,3,24,12,0,375,373,1,0,0,0,375,374,1,0,
        0,0,376,33,1,0,0,0,377,378,5,62,0,0,378,379,5,4,0,0,379,380,3,48,
        24,0,380,381,5,6,0,0,381,382,3,46,23,0,382,35,1,0,0,0,383,385,3,
        26,13,0,384,383,1,0,0,0,384,385,1,0,0,0,385,386,1,0,0,0,386,387,
        5,17,0,0,387,388,5,73,0,0,388,397,5,4,0,0,389,394,3,38,19,0,390,
        391,5,15,0,0,391,393,3,38,19,0,392,390,1,0,0,0,393,396,1,0,0,0,394,
        392,1,0,0,0,394,395,1,0,0,0,395,398,1,0,0,0,396,394,1,0,0,0,397,
        389,1,0,0,0,397,398,1,0,0,0,398,399,1,0,0,0,399,400,5,6,0,0,400,
        401,3,46,23,0,401,37,1,0,0,0,402,403,5,71,0,0,403,425,5,73,0,0,404,
        405,5,71,0,0,405,406,5,73,0,0,406,425,5,63,0,0,407,408,5,71,0,0,
        408,409,5,73,0,0,409,410,5,63,0,0,410,411,5,8,0,0,411,425,3,48,24,
        0,412,413,5,71,0,0,413,414,5,73,0,0,414,415,5,8,0,0,415,425,3,48,
        24,0,416,417,5,71,0,0,417,418,5,73,0,0,418,419,5,8,0,0,419,425,3,
        44,22,0,420,421,5,71,0,0,421,422,5,73,0,0,422,423,5,8,0,0,423,425,
        3,44,22,0,424,402,1,0,0,0,424,404,1,0,0,0,424,407,1,0,0,0,424,412,
        1,0,0,0,424,416,1,0,0,0,424,420,1,0,0,0,425,39,1,0,0,0,426,427,5,
        73,0,0,427,428,5,8,0,0,428,429,3,48,24,0,429,41,1,0,0,0,430,431,
        5,68,0,0,431,436,5,73,0,0,432,433,5,13,0,0,433,435,5,73,0,0,434,
        432,1,0,0,0,435,438,1,0,0,0,436,434,1,0,0,0,436,437,1,0,0,0,437,
        439,1,0,0,0,438,436,1,0,0,0,439,440,5,9,0,0,440,43,1,0,0,0,441,442,
        5,73,0,0,442,451,5,4,0,0,443,448,3,48,24,0,444,445,5,15,0,0,445,
        447,3,48,24,0,446,444,1,0,0,0,447,450,1,0,0,0,448,446,1,0,0,0,448,
        449,1,0,0,0,449,452,1,0,0,0,450,448,1,0,0,0,451,443,1,0,0,0,451,
        452,1,0,0,0,452,453,1,0,0,0,453,502,5,6,0,0,454,455,5,73,0,0,455,
        456,5,13,0,0,456,457,5,73,0,0,457,466,5,4,0,0,458,463,3,48,24,0,
        459,460,5,15,0,0,460,462,3,48,24,0,461,459,1,0,0,0,462,465,1,0,0,
        0,463,461,1,0,0,0,463,464,1,0,0,0,464,467,1,0,0,0,465,463,1,0,0,
        0,466,458,1,0,0,0,466,467,1,0,0,0,467,468,1,0,0,0,468,502,5,6,0,
        0,469,470,5,71,0,0,470,471,5,73,0,0,471,472,5,8,0,0,472,473,5,73,
        0,0,473,482,5,4,0,0,474,479,3,48,24,0,475,476,5,15,0,0,476,478,3,
        48,24,0,477,475,1,0,0,0,478,481,1,0,0,0,479,477,1,0,0,0,479,480,
        1,0,0,0,480,483,1,0,0,0,481,479,1,0,0,0,482,474,1,0,0,0,482,483,
        1,0,0,0,483,484,1,0,0,0,484,485,5,6,0,0,485,502,5,9,0,0,486,487,
        5,73,0,0,487,496,5,4,0,0,488,493,3,48,24,0,489,490,5,15,0,0,490,
        492,3,48,24,0,491,489,1,0,0,0,492,495,1,0,0,0,493,491,1,0,0,0,493,
        494,1,0,0,0,494,497,1,0,0,0,495,493,1,0,0,0,496,488,1,0,0,0,496,
        497,1,0,0,0,497,498,1,0,0,0,498,499,5,6,0,0,499,500,5,13,0,0,500,
        502,5,73,0,0,501,441,1,0,0,0,501,454,1,0,0,0,501,469,1,0,0,0,501,
        486,1,0,0,0,502,45,1,0,0,0,503,507,5,11,0,0,504,506,3,2,1,0,505,
        504,1,0,0,0,506,509,1,0,0,0,507,505,1,0,0,0,507,508,1,0,0,0,508,
        510,1,0,0,0,509,507,1,0,0,0,510,511,5,12,0,0,511,47,1,0,0,0,512,
        513,6,24,-1,0,513,767,3,58,29,0,514,767,3,44,22,0,515,516,5,4,0,
        0,516,517,3,48,24,0,517,518,5,6,0,0,518,767,1,0,0,0,519,767,5,73,
        0,0,520,521,5,41,0,0,521,767,3,48,24,38,522,523,5,42,0,0,523,767,
        3,48,24,37,524,525,5,73,0,0,525,767,5,26,0,0,526,527,5,73,0,0,527,
        767,5,27,0,0,528,529,3,58,29,0,529,530,5,26,0,0,530,767,1,0,0,0,
        531,532,3,58,29,0,532,533,5,27,0,0,533,767,1,0,0,0,534,535,5,73,
        0,0,535,536,5,13,0,0,536,767,5,73,0,0,537,538,5,73,0,0,538,539,5,
        13,0,0,539,540,5,73,0,0,540,549,5,4,0,0,541,546,3,48,24,0,542,543,
        5,15,0,0,543,545,3,48,24,0,544,542,1,0,0,0,545,548,1,0,0,0,546,544,
        1,0,0,0,546,547,1,0,0,0,547,550,1,0,0,0,548,546,1,0,0,0,549,541,
        1,0,0,0,549,550,1,0,0,0,550,551,1,0,0,0,551,767,5,6,0,0,552,767,
        5,73,0,0,553,554,5,73,0,0,554,563,5,4,0,0,555,560,3,48,24,0,556,
        557,5,15,0,0,557,559,3,48,24,0,558,556,1,0,0,0,559,562,1,0,0,0,560,
        558,1,0,0,0,560,561,1,0,0,0,561,564,1,0,0,0,562,560,1,0,0,0,563,
        555,1,0,0,0,563,564,1,0,0,0,564,565,1,0,0,0,565,767,5,6,0,0,566,
        567,5,73,0,0,567,576,5,4,0,0,568,573,3,48,24,0,569,570,5,15,0,0,
        570,572,3,48,24,0,571,569,1,0,0,0,572,575,1,0,0,0,573,571,1,0,0,
        0,573,574,1,0,0,0,574,577,1,0,0,0,575,573,1,0,0,0,576,568,1,0,0,
        0,576,577,1,0,0,0,577,578,1,0,0,0,578,579,5,6,0,0,579,580,5,13,0,
        0,580,767,5,73,0,0,581,582,5,73,0,0,582,591,5,4,0,0,583,588,3,48,
        24,0,584,585,5,15,0,0,585,587,3,48,24,0,586,584,1,0,0,0,587,590,
        1,0,0,0,588,586,1,0,0,0,588,589,1,0,0,0,589,592,1,0,0,0,590,588,
        1,0,0,0,591,583,1,0,0,0,591,592,1,0,0,0,592,593,1,0,0,0,593,594,
        5,6,0,0,594,595,5,13,0,0,595,596,5,73,0,0,596,605,5,4,0,0,597,602,
        3,48,24,0,598,599,5,15,0,0,599,601,3,48,24,0,600,598,1,0,0,0,601,
        604,1,0,0,0,602,600,1,0,0,0,602,603,1,0,0,0,603,606,1,0,0,0,604,
        602,1,0,0,0,605,597,1,0,0,0,605,606,1,0,0,0,606,607,1,0,0,0,607,
        767,5,6,0,0,608,609,5,73,0,0,609,618,5,4,0,0,610,615,3,48,24,0,611,
        612,5,15,0,0,612,614,3,48,24,0,613,611,1,0,0,0,614,617,1,0,0,0,615,
        613,1,0,0,0,615,616,1,0,0,0,616,619,1,0,0,0,617,615,1,0,0,0,618,
        610,1,0,0,0,618,619,1,0,0,0,619,620,1,0,0,0,620,621,5,6,0,0,621,
        622,5,13,0,0,622,623,5,73,0,0,623,632,5,4,0,0,624,629,3,48,24,0,
        625,626,5,15,0,0,626,628,3,48,24,0,627,625,1,0,0,0,628,631,1,0,0,
        0,629,627,1,0,0,0,629,630,1,0,0,0,630,633,1,0,0,0,631,629,1,0,0,
        0,632,624,1,0,0,0,632,633,1,0,0,0,633,634,1,0,0,0,634,635,5,6,0,
        0,635,636,5,13,0,0,636,767,5,73,0,0,637,767,3,44,22,0,638,639,3,
        44,22,0,639,640,5,13,0,0,640,641,5,73,0,0,641,767,1,0,0,0,642,643,
        3,44,22,0,643,644,5,13,0,0,644,645,5,73,0,0,645,654,5,4,0,0,646,
        651,3,48,24,0,647,648,5,15,0,0,648,650,3,48,24,0,649,647,1,0,0,0,
        650,653,1,0,0,0,651,649,1,0,0,0,651,652,1,0,0,0,652,655,1,0,0,0,
        653,651,1,0,0,0,654,646,1,0,0,0,654,655,1,0,0,0,655,656,1,0,0,0,
        656,657,5,6,0,0,657,767,1,0,0,0,658,659,3,44,22,0,659,660,5,13,0,
        0,660,661,5,73,0,0,661,670,5,4,0,0,662,667,3,48,24,0,663,664,5,15,
        0,0,664,666,3,48,24,0,665,663,1,0,0,0,666,669,1,0,0,0,667,665,1,
        0,0,0,667,668,1,0,0,0,668,671,1,0,0,0,669,667,1,0,0,0,670,662,1,
        0,0,0,670,671,1,0,0,0,671,672,1,0,0,0,672,673,5,6,0,0,673,674,5,
        13,0,0,674,675,5,73,0,0,675,767,1,0,0,0,676,677,3,44,22,0,677,678,
        5,13,0,0,678,679,5,73,0,0,679,688,5,4,0,0,680,685,3,48,24,0,681,
        682,5,15,0,0,682,684,3,48,24,0,683,681,1,0,0,0,684,687,1,0,0,0,685,
        683,1,0,0,0,685,686,1,0,0,0,686,689,1,0,0,0,687,685,1,0,0,0,688,
        680,1,0,0,0,688,689,1,0,0,0,689,690,1,0,0,0,690,691,5,6,0,0,691,
        692,5,13,0,0,692,693,5,73,0,0,693,702,5,4,0,0,694,699,3,48,24,0,
        695,696,5,15,0,0,696,698,3,48,24,0,697,695,1,0,0,0,698,701,1,0,0,
        0,699,697,1,0,0,0,699,700,1,0,0,0,700,703,1,0,0,0,701,699,1,0,0,
        0,702,694,1,0,0,0,702,703,1,0,0,0,703,704,1,0,0,0,704,705,5,6,0,
        0,705,767,1,0,0,0,706,707,3,44,22,0,707,708,5,13,0,0,708,709,5,73,
        0,0,709,718,5,4,0,0,710,715,3,48,24,0,711,712,5,15,0,0,712,714,3,
        48,24,0,713,711,1,0,0,0,714,717,1,0,0,0,715,713,1,0,0,0,715,716,
        1,0,0,0,716,719,1,0,0,0,717,715,1,0,0,0,718,710,1,0,0,0,718,719,
        1,0,0,0,719,720,1,0,0,0,720,721,5,6,0,0,721,722,5,13,0,0,722,723,
        5,73,0,0,723,732,5,4,0,0,724,729,3,48,24,0,725,726,5,15,0,0,726,
        728,3,48,24,0,727,725,1,0,0,0,728,731,1,0,0,0,729,727,1,0,0,0,729,
        730,1,0,0,0,730,733,1,0,0,0,731,729,1,0,0,0,732,724,1,0,0,0,732,
        733,1,0,0,0,733,734,1,0,0,0,734,735,5,6,0,0,735,736,5,13,0,0,736,
        737,5,73,0,0,737,767,1,0,0,0,738,767,3,4,2,0,739,767,3,14,7,0,740,
        767,3,6,3,0,741,767,3,34,17,0,742,767,3,18,9,0,743,767,3,20,10,0,
        744,745,5,3,0,0,745,746,5,4,0,0,746,747,5,73,0,0,747,748,5,5,0,0,
        748,749,5,73,0,0,749,750,5,6,0,0,750,767,3,46,23,0,751,752,5,17,
        0,0,752,753,5,73,0,0,753,762,5,4,0,0,754,759,3,38,19,0,755,756,5,
        15,0,0,756,758,3,38,19,0,757,755,1,0,0,0,758,761,1,0,0,0,759,757,
        1,0,0,0,759,760,1,0,0,0,760,763,1,0,0,0,761,759,1,0,0,0,762,754,
        1,0,0,0,762,763,1,0,0,0,763,764,1,0,0,0,764,765,5,6,0,0,765,767,
        3,46,23,0,766,512,1,0,0,0,766,514,1,0,0,0,766,515,1,0,0,0,766,519,
        1,0,0,0,766,520,1,0,0,0,766,522,1,0,0,0,766,524,1,0,0,0,766,526,
        1,0,0,0,766,528,1,0,0,0,766,531,1,0,0,0,766,534,1,0,0,0,766,537,
        1,0,0,0,766,552,1,0,0,0,766,553,1,0,0,0,766,566,1,0,0,0,766,581,
        1,0,0,0,766,608,1,0,0,0,766,637,1,0,0,0,766,638,1,0,0,0,766,642,
        1,0,0,0,766,658,1,0,0,0,766,676,1,0,0,0,766,706,1,0,0,0,766,738,
        1,0,0,0,766,739,1,0,0,0,766,740,1,0,0,0,766,741,1,0,0,0,766,742,
        1,0,0,0,766,743,1,0,0,0,766,744,1,0,0,0,766,751,1,0,0,0,767,861,
        1,0,0,0,768,769,10,42,0,0,769,770,3,50,25,0,770,771,3,48,24,43,771,
        860,1,0,0,0,772,773,10,41,0,0,773,774,3,52,26,0,774,775,3,48,24,
        42,775,860,1,0,0,0,776,777,10,40,0,0,777,778,3,54,27,0,778,779,3,
        48,24,41,779,860,1,0,0,0,780,781,10,39,0,0,781,782,3,56,28,0,782,
        783,3,48,24,40,783,860,1,0,0,0,784,785,10,36,0,0,785,786,5,43,0,
        0,786,787,3,48,24,0,787,788,5,19,0,0,788,789,3,48,24,37,789,860,
        1,0,0,0,790,791,10,25,0,0,791,793,5,14,0,0,792,794,3,48,24,0,793,
        792,1,0,0,0,793,794,1,0,0,0,794,795,1,0,0,0,795,796,5,16,0,0,796,
        797,5,8,0,0,797,860,3,48,24,26,798,799,10,23,0,0,799,801,5,11,0,
        0,800,802,3,48,24,0,801,800,1,0,0,0,801,802,1,0,0,0,802,803,1,0,
        0,0,803,804,5,12,0,0,804,805,5,8,0,0,805,860,3,48,24,24,806,807,
        10,35,0,0,807,808,5,13,0,0,808,860,5,73,0,0,809,810,10,34,0,0,810,
        811,5,13,0,0,811,812,5,73,0,0,812,821,5,4,0,0,813,818,3,48,24,0,
        814,815,5,15,0,0,815,817,3,48,24,0,816,814,1,0,0,0,817,820,1,0,0,
        0,818,816,1,0,0,0,818,819,1,0,0,0,819,822,1,0,0,0,820,818,1,0,0,
        0,821,813,1,0,0,0,821,822,1,0,0,0,822,823,1,0,0,0,823,860,5,6,0,
        0,824,825,10,33,0,0,825,827,5,14,0,0,826,828,3,48,24,0,827,826,1,
        0,0,0,827,828,1,0,0,0,828,829,1,0,0,0,829,860,5,16,0,0,830,831,10,
        32,0,0,831,833,5,11,0,0,832,834,3,48,24,0,833,832,1,0,0,0,833,834,
        1,0,0,0,834,835,1,0,0,0,835,860,5,12,0,0,836,837,10,31,0,0,837,860,
        5,26,0,0,838,839,10,30,0,0,839,860,5,27,0,0,840,841,10,24,0,0,841,
        843,5,14,0,0,842,844,3,48,24,0,843,842,1,0,0,0,843,844,1,0,0,0,844,
        845,1,0,0,0,845,846,5,16,0,0,846,847,5,8,0,0,847,860,3,44,22,0,848,
        849,10,22,0,0,849,853,5,11,0,0,850,852,3,48,24,0,851,850,1,0,0,0,
        852,855,1,0,0,0,853,854,1,0,0,0,853,851,1,0,0,0,854,856,1,0,0,0,
        855,853,1,0,0,0,856,857,5,12,0,0,857,858,5,8,0,0,858,860,3,44,22,
        0,859,768,1,0,0,0,859,772,1,0,0,0,859,776,1,0,0,0,859,780,1,0,0,
        0,859,784,1,0,0,0,859,790,1,0,0,0,859,798,1,0,0,0,859,806,1,0,0,
        0,859,809,1,0,0,0,859,824,1,0,0,0,859,830,1,0,0,0,859,836,1,0,0,
        0,859,838,1,0,0,0,859,840,1,0,0,0,859,848,1,0,0,0,860,863,1,0,0,
        0,861,859,1,0,0,0,861,862,1,0,0,0,862,49,1,0,0,0,863,861,1,0,0,0,
        864,865,7,2,0,0,865,51,1,0,0,0,866,867,7,3,0,0,867,53,1,0,0,0,868,
        869,7,4,0,0,869,55,1,0,0,0,870,871,5,65,0,0,871,57,1,0,0,0,872,873,
        7,5,0,0,873,59,1,0,0,0,82,63,75,116,118,178,181,194,197,232,236,
        239,246,249,252,255,264,267,274,281,288,290,300,312,322,331,335,
        370,375,384,394,397,424,436,448,451,463,466,479,482,493,496,501,
        507,546,549,560,563,573,576,588,591,602,605,615,618,629,632,651,
        654,667,670,685,688,699,702,715,718,729,732,759,762,766,793,801,
        818,821,827,833,843,853,859,861
    ]

class CubeScriptParser ( Parser ):

    grammarFileName = "CubeScript.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'house'", "'room'", "'for'", "'('", "'>'", 
                     "')'", "'<'", "'='", "';'", "'switch'", "'{'", "'}'", 
                     "'.'", "'['", "','", "']'", "'struct'", "'bland'", 
                     "':'", "'stop;'", "'at'", "'if'", "'else'", "'foreach'", 
                     "'in'", "'++'", "'--'", "'public'", "'private'", "'protected'", 
                     "'static'", "'function'", "'void'", "'pubtask'", "'pubbool'", 
                     "'pubstring'", "'pubint'", "'pubfloat'", "'pubvoid'", 
                     "'task'", "'-'", "'!'", "'?'", "'*'", "'/'", "'%'", 
                     "'^'", "'<<'", "'>>'", "'&'", "'|'", "'&&'", "'||'", 
                     "'+='", "'-='", "'*='", "'+'", "'<='", "'>='", "'=='", 
                     "'!='" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "WHILE", "ARRAY", "Comment", 
                      "BOOL_OPERATOR", "INTEGER", "FLOAT", "IMPORT", "STRING", 
                      "BOOL", "TYPE", "WS", "IDENTIFIER" ]

    RULE_program = 0
    RULE_line = 1
    RULE_statement = 2
    RULE_switchBlock = 3
    RULE_defaultCase = 4
    RULE_switchCase = 5
    RULE_ifBlock = 6
    RULE_ifStatement = 7
    RULE_elseifBlock = 8
    RULE_forBlock = 9
    RULE_foreachBlock = 10
    RULE_incrementOp = 11
    RULE_decrementOp = 12
    RULE_modifier = 13
    RULE_funcdef = 14
    RULE_forInit = 15
    RULE_forUpdate = 16
    RULE_whileBlock = 17
    RULE_functiondefinition = 18
    RULE_param = 19
    RULE_assignment = 20
    RULE_usingStatement = 21
    RULE_functionCall = 22
    RULE_block = 23
    RULE_expression = 24
    RULE_multOp = 25
    RULE_addOp = 26
    RULE_cmpOp = 27
    RULE_boolOp = 28
    RULE_constant = 29

    ruleNames =  [ "program", "line", "statement", "switchBlock", "defaultCase", 
                   "switchCase", "ifBlock", "ifStatement", "elseifBlock", 
                   "forBlock", "foreachBlock", "incrementOp", "decrementOp", 
                   "modifier", "funcdef", "forInit", "forUpdate", "whileBlock", 
                   "functiondefinition", "param", "assignment", "usingStatement", 
                   "functionCall", "block", "expression", "multOp", "addOp", 
                   "cmpOp", "boolOp", "constant" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    WHILE=62
    ARRAY=63
    Comment=64
    BOOL_OPERATOR=65
    INTEGER=66
    FLOAT=67
    IMPORT=68
    STRING=69
    BOOL=70
    TYPE=71
    WS=72
    IDENTIFIER=73

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CubeScriptParser.EOF, 0)

        def line(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CubeScriptParser.LineContext)
            else:
                return self.getTypedRuleContext(CubeScriptParser.LineContext,i)


        def getRuleIndex(self):
            return CubeScriptParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = CubeScriptParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 63
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686014396529394) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 765) != 0):
                self.state = 60
                self.line()
                self.state = 65
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 66
            self.match(CubeScriptParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(CubeScriptParser.StatementContext,0)


        def ifBlock(self):
            return self.getTypedRuleContext(CubeScriptParser.IfBlockContext,0)


        def whileBlock(self):
            return self.getTypedRuleContext(CubeScriptParser.WhileBlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(CubeScriptParser.ExpressionContext,0)


        def Comment(self):
            return self.getToken(CubeScriptParser.Comment, 0)

        def usingStatement(self):
            return self.getTypedRuleContext(CubeScriptParser.UsingStatementContext,0)


        def getRuleIndex(self):
            return CubeScriptParser.RULE_line

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLine" ):
                listener.enterLine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLine" ):
                listener.exitLine(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLine" ):
                return visitor.visitLine(self)
            else:
                return visitor.visitChildren(self)




    def line(self):

        localctx = CubeScriptParser.LineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_line)
        try:
            self.state = 75
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 68
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 69
                self.ifBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 70
                self.whileBlock()
                self.state = 71
                self.expression(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 73
                self.match(CubeScriptParser.Comment)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 74
                self.usingStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CubeScriptParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FunctiondefineContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functiondefinition(self):
            return self.getTypedRuleContext(CubeScriptParser.FunctiondefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctiondefine" ):
                listener.enterFunctiondefine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctiondefine" ):
                listener.exitFunctiondefine(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctiondefine" ):
                return visitor.visitFunctiondefine(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallexprrrContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(CubeScriptParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallexprrr" ):
                listener.enterFunctionCallexprrr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallexprrr" ):
                listener.exitFunctionCallexprrr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallexprrr" ):
                return visitor.visitFunctionCallexprrr(self)
            else:
                return visitor.visitChildren(self)


    class NamespacestatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(CubeScriptParser.IDENTIFIER, 0)
        def block(self):
            return self.getTypedRuleContext(CubeScriptParser.BlockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacestatement" ):
                listener.enterNamespacestatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacestatement" ):
                listener.exitNamespacestatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacestatement" ):
                return visitor.visitNamespacestatement(self)
            else:
                return visitor.visitChildren(self)


    class VaribleexprContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(CubeScriptParser.IDENTIFIER, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CubeScriptParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CubeScriptParser.ExpressionContext,i)

        def TYPE(self):
            return self.getToken(CubeScriptParser.TYPE, 0)
        def functionCall(self):
            return self.getTypedRuleContext(CubeScriptParser.FunctionCallContext,0)

        def ARRAY(self):
            return self.getToken(CubeScriptParser.ARRAY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVaribleexpr" ):
                listener.enterVaribleexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVaribleexpr" ):
                listener.exitVaribleexpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVaribleexpr" ):
                return visitor.visitVaribleexpr(self)
            else:
                return visitor.visitChildren(self)


    class AssignmentexprContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def assignment(self):
            return self.getTypedRuleContext(CubeScriptParser.AssignmentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentexpr" ):
                listener.enterAssignmentexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentexpr" ):
                listener.exitAssignmentexpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentexpr" ):
                return visitor.visitAssignmentexpr(self)
            else:
                return visitor.visitChildren(self)


    class ForloopContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(CubeScriptParser.IDENTIFIER)
            else:
                return self.getToken(CubeScriptParser.IDENTIFIER, i)
        def block(self):
            return self.getTypedRuleContext(CubeScriptParser.BlockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForloop" ):
                listener.enterForloop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForloop" ):
                listener.exitForloop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForloop" ):
                return visitor.visitForloop(self)
            else:
                return visitor.visitChildren(self)


    class VariblecallexprsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TYPE(self):
            return self.getToken(CubeScriptParser.TYPE, 0)
        def IDENTIFIER(self):
            return self.getToken(CubeScriptParser.IDENTIFIER, 0)
        def functionCall(self):
            return self.getTypedRuleContext(CubeScriptParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariblecallexprs" ):
                listener.enterVariblecallexprs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariblecallexprs" ):
                listener.exitVariblecallexprs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariblecallexprs" ):
                return visitor.visitVariblecallexprs(self)
            else:
                return visitor.visitChildren(self)


    class StructstatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(CubeScriptParser.IDENTIFIER, 0)
        def block(self):
            return self.getTypedRuleContext(CubeScriptParser.BlockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructstatement" ):
                listener.enterStructstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructstatement" ):
                listener.exitStructstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructstatement" ):
                return visitor.visitStructstatement(self)
            else:
                return visitor.visitChildren(self)


    class UsingstatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def usingStatement(self):
            return self.getTypedRuleContext(CubeScriptParser.UsingStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingstatement" ):
                listener.enterUsingstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingstatement" ):
                listener.exitUsingstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingstatement" ):
                return visitor.visitUsingstatement(self)
            else:
                return visitor.visitChildren(self)


    class SwitchblockexprsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(CubeScriptParser.ExpressionContext,0)

        def switchCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CubeScriptParser.SwitchCaseContext)
            else:
                return self.getTypedRuleContext(CubeScriptParser.SwitchCaseContext,i)

        def defaultCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CubeScriptParser.DefaultCaseContext)
            else:
                return self.getTypedRuleContext(CubeScriptParser.DefaultCaseContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchblockexprs" ):
                listener.enterSwitchblockexprs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchblockexprs" ):
                listener.exitSwitchblockexprs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchblockexprs" ):
                return visitor.visitSwitchblockexprs(self)
            else:
                return visitor.visitChildren(self)


    class VariblecallexprzContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TYPE(self):
            return self.getToken(CubeScriptParser.TYPE, 0)
        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(CubeScriptParser.IDENTIFIER)
            else:
                return self.getToken(CubeScriptParser.IDENTIFIER, i)
        def functionCall(self):
            return self.getTypedRuleContext(CubeScriptParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariblecallexprz" ):
                listener.enterVariblecallexprz(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariblecallexprz" ):
                listener.exitVariblecallexprz(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariblecallexprz" ):
                return visitor.visitVariblecallexprz(self)
            else:
                return visitor.visitChildren(self)


    class ClassstatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(CubeScriptParser.IDENTIFIER, 0)
        def block(self):
            return self.getTypedRuleContext(CubeScriptParser.BlockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassstatement" ):
                listener.enterClassstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassstatement" ):
                listener.exitClassstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassstatement" ):
                return visitor.visitClassstatement(self)
            else:
                return visitor.visitChildren(self)


    class ArraydefinitionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(CubeScriptParser.IDENTIFIER)
            else:
                return self.getToken(CubeScriptParser.IDENTIFIER, i)
        def ARRAY(self):
            return self.getToken(CubeScriptParser.ARRAY, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CubeScriptParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CubeScriptParser.ExpressionContext,i)

        def functionCall(self):
            return self.getTypedRuleContext(CubeScriptParser.FunctionCallContext,0)

        def constant(self):
            return self.getTypedRuleContext(CubeScriptParser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArraydefinition" ):
                listener.enterArraydefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArraydefinition" ):
                listener.exitArraydefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArraydefinition" ):
                return visitor.visitArraydefinition(self)
            else:
                return visitor.visitChildren(self)


    class StringarrayContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TYPE(self):
            return self.getToken(CubeScriptParser.TYPE, 0)
        def functionCall(self):
            return self.getTypedRuleContext(CubeScriptParser.FunctionCallContext,0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(CubeScriptParser.IDENTIFIER)
            else:
                return self.getToken(CubeScriptParser.IDENTIFIER, i)
        def ARRAY(self):
            return self.getToken(CubeScriptParser.ARRAY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringarray" ):
                listener.enterStringarray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringarray" ):
                listener.exitStringarray(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringarray" ):
                return visitor.visitStringarray(self)
            else:
                return visitor.visitChildren(self)



    def statement(self):

        localctx = CubeScriptParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                localctx = CubeScriptParser.AssignmentexprContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 77
                self.assignment()
                pass

            elif la_ == 2:
                localctx = CubeScriptParser.UsingstatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 78
                self.usingStatement()
                pass

            elif la_ == 3:
                localctx = CubeScriptParser.NamespacestatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 79
                self.match(CubeScriptParser.T__0)
                self.state = 80
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 81
                self.block()
                pass

            elif la_ == 4:
                localctx = CubeScriptParser.ClassstatementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 82
                self.match(CubeScriptParser.T__1)
                self.state = 83
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 84
                self.block()
                pass

            elif la_ == 5:
                localctx = CubeScriptParser.FunctiondefineContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 85
                self.functiondefinition()
                pass

            elif la_ == 6:
                localctx = CubeScriptParser.ForloopContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 86
                self.match(CubeScriptParser.T__2)
                self.state = 87
                self.match(CubeScriptParser.T__3)
                self.state = 88
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 89
                self.match(CubeScriptParser.T__4)
                self.state = 90
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 91
                self.match(CubeScriptParser.T__5)
                self.state = 92
                self.block()
                pass

            elif la_ == 7:
                localctx = CubeScriptParser.ForloopContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 93
                self.match(CubeScriptParser.T__2)
                self.state = 94
                self.match(CubeScriptParser.T__3)
                self.state = 95
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 96
                self.match(CubeScriptParser.T__6)
                self.state = 97
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 98
                self.match(CubeScriptParser.T__5)
                self.state = 99
                self.block()
                pass

            elif la_ == 8:
                localctx = CubeScriptParser.VariblecallexprsContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 100
                self.match(CubeScriptParser.TYPE)
                self.state = 101
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 102
                self.match(CubeScriptParser.T__7)
                self.state = 103
                self.functionCall()
                self.state = 104
                self.match(CubeScriptParser.T__8)
                pass

            elif la_ == 9:
                localctx = CubeScriptParser.FunctionCallexprrrContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 106
                self.functionCall()
                self.state = 107
                self.match(CubeScriptParser.T__8)
                pass

            elif la_ == 10:
                localctx = CubeScriptParser.SwitchblockexprsContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 109
                self.match(CubeScriptParser.T__9)
                self.state = 110
                self.match(CubeScriptParser.T__3)
                self.state = 111
                self.expression(0)
                self.state = 112
                self.match(CubeScriptParser.T__5)
                self.state = 113
                self.match(CubeScriptParser.T__10)
                self.state = 118
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==18 or _la==21:
                    self.state = 116
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [21]:
                        self.state = 114
                        self.switchCase()
                        pass
                    elif token in [18]:
                        self.state = 115
                        self.defaultCase()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 120
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 121
                self.match(CubeScriptParser.T__11)
                pass

            elif la_ == 11:
                localctx = CubeScriptParser.VaribleexprContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 123
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 124
                self.match(CubeScriptParser.T__7)
                self.state = 125
                self.expression(0)
                self.state = 126
                self.match(CubeScriptParser.T__8)
                pass

            elif la_ == 12:
                localctx = CubeScriptParser.VaribleexprContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 128
                self.match(CubeScriptParser.TYPE)
                self.state = 129
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 130
                self.match(CubeScriptParser.T__7)
                self.state = 131
                self.expression(0)
                self.state = 132
                self.match(CubeScriptParser.T__8)
                pass

            elif la_ == 13:
                localctx = CubeScriptParser.VaribleexprContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 134
                self.match(CubeScriptParser.TYPE)
                self.state = 135
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 136
                self.match(CubeScriptParser.T__7)
                self.state = 137
                self.functionCall()
                self.state = 138
                self.match(CubeScriptParser.T__8)
                pass

            elif la_ == 14:
                localctx = CubeScriptParser.VariblecallexprzContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 140
                self.match(CubeScriptParser.TYPE)
                self.state = 141
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 142
                self.match(CubeScriptParser.T__7)
                self.state = 143
                self.functionCall()
                self.state = 144
                self.match(CubeScriptParser.T__8)
                pass

            elif la_ == 15:
                localctx = CubeScriptParser.VariblecallexprzContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 146
                self.match(CubeScriptParser.TYPE)
                self.state = 147
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 148
                self.match(CubeScriptParser.T__7)
                self.state = 149
                self.functionCall()
                self.state = 150
                self.match(CubeScriptParser.T__12)
                self.state = 151
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 152
                self.match(CubeScriptParser.T__8)
                pass

            elif la_ == 16:
                localctx = CubeScriptParser.VaribleexprContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 154
                self.match(CubeScriptParser.TYPE)
                self.state = 155
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 156
                self.match(CubeScriptParser.ARRAY)
                self.state = 157
                self.match(CubeScriptParser.T__7)
                self.state = 158
                self.expression(0)
                self.state = 159
                self.match(CubeScriptParser.T__8)
                pass

            elif la_ == 17:
                localctx = CubeScriptParser.VaribleexprContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 161
                self.match(CubeScriptParser.TYPE)
                self.state = 162
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 163
                self.match(CubeScriptParser.ARRAY)
                self.state = 164
                self.match(CubeScriptParser.T__7)
                self.state = 165
                self.functionCall()
                self.state = 166
                self.match(CubeScriptParser.T__8)
                pass

            elif la_ == 18:
                localctx = CubeScriptParser.VaribleexprContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 168
                self.match(CubeScriptParser.TYPE)
                self.state = 169
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 170
                self.match(CubeScriptParser.ARRAY)
                self.state = 171
                self.match(CubeScriptParser.T__7)
                self.state = 172
                self.match(CubeScriptParser.T__13)
                self.state = 181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611679417309985506) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                    self.state = 173
                    self.expression(0)
                    self.state = 178
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 174
                        self.match(CubeScriptParser.T__14)
                        self.state = 175
                        self.expression(0)
                        self.state = 180
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 183
                self.match(CubeScriptParser.T__15)
                self.state = 184
                self.match(CubeScriptParser.T__8)
                pass

            elif la_ == 19:
                localctx = CubeScriptParser.ArraydefinitionContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 185
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 186
                self.match(CubeScriptParser.ARRAY)
                self.state = 187
                self.match(CubeScriptParser.T__7)
                self.state = 188
                self.match(CubeScriptParser.T__13)
                self.state = 197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611679417309985506) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                    self.state = 189
                    self.expression(0)
                    self.state = 194
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 190
                        self.match(CubeScriptParser.T__14)
                        self.state = 191
                        self.expression(0)
                        self.state = 196
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 199
                self.match(CubeScriptParser.T__15)
                self.state = 200
                self.match(CubeScriptParser.T__8)
                pass

            elif la_ == 20:
                localctx = CubeScriptParser.ArraydefinitionContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 201
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 202
                self.match(CubeScriptParser.ARRAY)
                self.state = 203
                self.match(CubeScriptParser.T__7)
                self.state = 204
                self.functionCall()
                self.state = 205
                self.match(CubeScriptParser.T__8)
                pass

            elif la_ == 21:
                localctx = CubeScriptParser.VariblecallexprsContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 207
                self.match(CubeScriptParser.TYPE)
                self.state = 208
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 209
                self.match(CubeScriptParser.T__7)
                self.state = 210
                self.functionCall()
                self.state = 211
                self.match(CubeScriptParser.T__8)
                pass

            elif la_ == 22:
                localctx = CubeScriptParser.VaribleexprContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 213
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 214
                self.match(CubeScriptParser.T__7)
                self.state = 215
                self.functionCall()
                self.state = 216
                self.match(CubeScriptParser.T__8)
                pass

            elif la_ == 23:
                localctx = CubeScriptParser.VaribleexprContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 218
                self.match(CubeScriptParser.TYPE)
                self.state = 219
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 220
                self.match(CubeScriptParser.T__7)
                self.state = 221
                self.functionCall()
                self.state = 222
                self.match(CubeScriptParser.T__8)
                pass

            elif la_ == 24:
                localctx = CubeScriptParser.VaribleexprContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 224
                self.match(CubeScriptParser.TYPE)
                self.state = 225
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 226
                self.match(CubeScriptParser.ARRAY)
                self.state = 227
                self.match(CubeScriptParser.T__7)
                self.state = 228
                self.functionCall()
                self.state = 229
                self.match(CubeScriptParser.T__8)
                pass

            elif la_ == 25:
                localctx = CubeScriptParser.StringarrayContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 231
                    self.match(CubeScriptParser.IDENTIFIER)


                self.state = 234
                self.match(CubeScriptParser.TYPE)
                self.state = 236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 235
                    self.match(CubeScriptParser.IDENTIFIER)


                self.state = 239
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 238
                    self.match(CubeScriptParser.ARRAY)


                self.state = 241
                self.match(CubeScriptParser.T__7)
                self.state = 242
                self.functionCall()
                self.state = 243
                self.match(CubeScriptParser.T__8)
                pass

            elif la_ == 26:
                localctx = CubeScriptParser.ArraydefinitionContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 246
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 245
                    self.match(CubeScriptParser.IDENTIFIER)


                self.state = 249
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 248
                    self.constant()


                self.state = 252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 251
                    self.match(CubeScriptParser.IDENTIFIER)


                self.state = 255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 254
                    self.match(CubeScriptParser.ARRAY)


                self.state = 257
                self.match(CubeScriptParser.T__7)
                self.state = 258
                self.match(CubeScriptParser.T__13)
                self.state = 267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611679417309985506) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                    self.state = 259
                    self.expression(0)
                    self.state = 264
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 260
                        self.match(CubeScriptParser.T__14)
                        self.state = 261
                        self.expression(0)
                        self.state = 266
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 269
                self.match(CubeScriptParser.T__15)
                self.state = 270
                self.match(CubeScriptParser.T__8)
                pass

            elif la_ == 27:
                localctx = CubeScriptParser.StructstatementContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 271
                self.match(CubeScriptParser.T__16)
                self.state = 272
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 273
                self.block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CubeScriptParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CubeScriptParser.ExpressionContext,i)


        def switchCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CubeScriptParser.SwitchCaseContext)
            else:
                return self.getTypedRuleContext(CubeScriptParser.SwitchCaseContext,i)


        def defaultCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CubeScriptParser.DefaultCaseContext)
            else:
                return self.getTypedRuleContext(CubeScriptParser.DefaultCaseContext,i)


        def getRuleIndex(self):
            return CubeScriptParser.RULE_switchBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlock" ):
                listener.enterSwitchBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlock" ):
                listener.exitSwitchBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchBlock" ):
                return visitor.visitSwitchBlock(self)
            else:
                return visitor.visitChildren(self)




    def switchBlock(self):

        localctx = CubeScriptParser.SwitchBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_switchBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 276
            self.match(CubeScriptParser.T__9)
            self.state = 277
            self.match(CubeScriptParser.T__3)
            self.state = 281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611679417309985506) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                self.state = 278
                self.expression(0)
                self.state = 283
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 284
            self.match(CubeScriptParser.T__5)
            self.state = 285
            self.match(CubeScriptParser.T__10)
            self.state = 290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==18 or _la==21:
                self.state = 288
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [21]:
                    self.state = 286
                    self.switchCase()
                    pass
                elif token in [18]:
                    self.state = 287
                    self.defaultCase()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 292
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 293
            self.match(CubeScriptParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CubeScriptParser.StatementContext)
            else:
                return self.getTypedRuleContext(CubeScriptParser.StatementContext,i)


        def getRuleIndex(self):
            return CubeScriptParser.RULE_defaultCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultCase" ):
                listener.enterDefaultCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultCase" ):
                listener.exitDefaultCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultCase" ):
                return visitor.visitDefaultCase(self)
            else:
                return visitor.visitChildren(self)




    def defaultCase(self):

        localctx = CubeScriptParser.DefaultCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_defaultCase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 295
            self.match(CubeScriptParser.T__17)
            self.state = 296
            self.match(CubeScriptParser.T__18)
            self.state = 300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372032828111602) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                self.state = 297
                self.statement()
                self.state = 302
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 303
            self.match(CubeScriptParser.T__19)
            self.state = 304
            self.match(CubeScriptParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CubeScriptParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CubeScriptParser.StatementContext)
            else:
                return self.getTypedRuleContext(CubeScriptParser.StatementContext,i)


        def getRuleIndex(self):
            return CubeScriptParser.RULE_switchCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchCase" ):
                listener.enterSwitchCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchCase" ):
                listener.exitSwitchCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchCase" ):
                return visitor.visitSwitchCase(self)
            else:
                return visitor.visitChildren(self)




    def switchCase(self):

        localctx = CubeScriptParser.SwitchCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_switchCase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self.match(CubeScriptParser.T__20)
            self.state = 307
            self.expression(0)
            self.state = 308
            self.match(CubeScriptParser.T__18)
            self.state = 312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372032828111602) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                self.state = 309
                self.statement()
                self.state = 314
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 315
            self.match(CubeScriptParser.T__19)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CubeScriptParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(CubeScriptParser.BlockContext,0)


        def elseifBlock(self):
            return self.getTypedRuleContext(CubeScriptParser.ElseifBlockContext,0)


        def getRuleIndex(self):
            return CubeScriptParser.RULE_ifBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfBlock" ):
                listener.enterIfBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfBlock" ):
                listener.exitIfBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfBlock" ):
                return visitor.visitIfBlock(self)
            else:
                return visitor.visitChildren(self)




    def ifBlock(self):

        localctx = CubeScriptParser.IfBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_ifBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self.match(CubeScriptParser.T__21)
            self.state = 318
            self.expression(0)
            self.state = 319
            self.block()
            self.state = 322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 320
                self.match(CubeScriptParser.T__22)
                self.state = 321
                self.elseifBlock()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CubeScriptParser.ExpressionContext,0)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CubeScriptParser.BlockContext)
            else:
                return self.getTypedRuleContext(CubeScriptParser.BlockContext,i)


        def getRuleIndex(self):
            return CubeScriptParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = CubeScriptParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            self.match(CubeScriptParser.T__21)
            self.state = 325
            self.match(CubeScriptParser.T__3)
            self.state = 326
            self.expression(0)
            self.state = 327
            self.match(CubeScriptParser.T__5)
            self.state = 328
            self.block()
            self.state = 331
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 329
                self.match(CubeScriptParser.T__22)
                self.state = 330
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseifBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(CubeScriptParser.BlockContext,0)


        def ifBlock(self):
            return self.getTypedRuleContext(CubeScriptParser.IfBlockContext,0)


        def getRuleIndex(self):
            return CubeScriptParser.RULE_elseifBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseifBlock" ):
                listener.enterElseifBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseifBlock" ):
                listener.exitElseifBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseifBlock" ):
                return visitor.visitElseifBlock(self)
            else:
                return visitor.visitChildren(self)




    def elseifBlock(self):

        localctx = CubeScriptParser.ElseifBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_elseifBlock)
        try:
            self.state = 335
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11]:
                self.enterOuterAlt(localctx, 1)
                self.state = 333
                self.block()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 334
                self.ifBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CubeScriptParser.AssignmentContext)
            else:
                return self.getTypedRuleContext(CubeScriptParser.AssignmentContext,i)


        def expression(self):
            return self.getTypedRuleContext(CubeScriptParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(CubeScriptParser.BlockContext,0)


        def getRuleIndex(self):
            return CubeScriptParser.RULE_forBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForBlock" ):
                listener.enterForBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForBlock" ):
                listener.exitForBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForBlock" ):
                return visitor.visitForBlock(self)
            else:
                return visitor.visitChildren(self)




    def forBlock(self):

        localctx = CubeScriptParser.ForBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_forBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self.match(CubeScriptParser.T__2)
            self.state = 338
            self.match(CubeScriptParser.T__3)
            self.state = 339
            self.assignment()
            self.state = 340
            self.match(CubeScriptParser.T__8)
            self.state = 341
            self.expression(0)
            self.state = 342
            self.match(CubeScriptParser.T__8)
            self.state = 343
            self.assignment()
            self.state = 344
            self.match(CubeScriptParser.T__5)
            self.state = 345
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForeachBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(CubeScriptParser.IDENTIFIER)
            else:
                return self.getToken(CubeScriptParser.IDENTIFIER, i)

        def block(self):
            return self.getTypedRuleContext(CubeScriptParser.BlockContext,0)


        def getRuleIndex(self):
            return CubeScriptParser.RULE_foreachBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeachBlock" ):
                listener.enterForeachBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeachBlock" ):
                listener.exitForeachBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForeachBlock" ):
                return visitor.visitForeachBlock(self)
            else:
                return visitor.visitChildren(self)




    def foreachBlock(self):

        localctx = CubeScriptParser.ForeachBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_foreachBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            self.match(CubeScriptParser.T__23)
            self.state = 348
            self.match(CubeScriptParser.T__3)
            self.state = 349
            self.match(CubeScriptParser.IDENTIFIER)
            self.state = 350
            self.match(CubeScriptParser.T__24)
            self.state = 351
            self.match(CubeScriptParser.IDENTIFIER)
            self.state = 352
            self.match(CubeScriptParser.T__5)
            self.state = 353
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncrementOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CubeScriptParser.RULE_incrementOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncrementOp" ):
                listener.enterIncrementOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncrementOp" ):
                listener.exitIncrementOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncrementOp" ):
                return visitor.visitIncrementOp(self)
            else:
                return visitor.visitChildren(self)




    def incrementOp(self):

        localctx = CubeScriptParser.IncrementOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_incrementOp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            self.match(CubeScriptParser.T__25)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecrementOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CubeScriptParser.RULE_decrementOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecrementOp" ):
                listener.enterDecrementOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecrementOp" ):
                listener.exitDecrementOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecrementOp" ):
                return visitor.visitDecrementOp(self)
            else:
                return visitor.visitChildren(self)




    def decrementOp(self):

        localctx = CubeScriptParser.DecrementOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_decrementOp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.match(CubeScriptParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CubeScriptParser.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifier" ):
                return visitor.visitModifier(self)
            else:
                return visitor.visitChildren(self)




    def modifier(self):

        localctx = CubeScriptParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4026531840) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CubeScriptParser.RULE_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncdef" ):
                listener.enterFuncdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncdef" ):
                listener.exitFuncdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncdef" ):
                return visitor.visitFuncdef(self)
            else:
                return visitor.visitChildren(self)




    def funcdef(self):

        localctx = CubeScriptParser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2194728419328) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForInitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(CubeScriptParser.TYPE, 0)

        def IDENTIFIER(self):
            return self.getToken(CubeScriptParser.IDENTIFIER, 0)

        def expression(self):
            return self.getTypedRuleContext(CubeScriptParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CubeScriptParser.RULE_forInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInit" ):
                listener.enterForInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInit" ):
                listener.exitForInit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForInit" ):
                return visitor.visitForInit(self)
            else:
                return visitor.visitChildren(self)




    def forInit(self):

        localctx = CubeScriptParser.ForInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_forInit)
        try:
            self.state = 370
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 363
                self.match(CubeScriptParser.TYPE)
                self.state = 364
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 365
                self.match(CubeScriptParser.T__7)
                self.state = 366
                self.expression(0)
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 2)
                self.state = 367
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 368
                self.match(CubeScriptParser.T__7)
                self.state = 369
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForUpdateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(CubeScriptParser.IDENTIFIER, 0)

        def incrementOp(self):
            return self.getTypedRuleContext(CubeScriptParser.IncrementOpContext,0)


        def decrementOp(self):
            return self.getTypedRuleContext(CubeScriptParser.DecrementOpContext,0)


        def getRuleIndex(self):
            return CubeScriptParser.RULE_forUpdate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForUpdate" ):
                listener.enterForUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForUpdate" ):
                listener.exitForUpdate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForUpdate" ):
                return visitor.visitForUpdate(self)
            else:
                return visitor.visitChildren(self)




    def forUpdate(self):

        localctx = CubeScriptParser.ForUpdateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_forUpdate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.match(CubeScriptParser.IDENTIFIER)
            self.state = 375
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                self.state = 373
                self.incrementOp()
                pass
            elif token in [27]:
                self.state = 374
                self.decrementOp()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(CubeScriptParser.WHILE, 0)

        def expression(self):
            return self.getTypedRuleContext(CubeScriptParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(CubeScriptParser.BlockContext,0)


        def getRuleIndex(self):
            return CubeScriptParser.RULE_whileBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileBlock" ):
                listener.enterWhileBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileBlock" ):
                listener.exitWhileBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileBlock" ):
                return visitor.visitWhileBlock(self)
            else:
                return visitor.visitChildren(self)




    def whileBlock(self):

        localctx = CubeScriptParser.WhileBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_whileBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 377
            self.match(CubeScriptParser.WHILE)
            self.state = 378
            self.match(CubeScriptParser.T__3)
            self.state = 379
            self.expression(0)
            self.state = 380
            self.match(CubeScriptParser.T__5)
            self.state = 381
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctiondefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(CubeScriptParser.IDENTIFIER, 0)

        def block(self):
            return self.getTypedRuleContext(CubeScriptParser.BlockContext,0)


        def modifier(self):
            return self.getTypedRuleContext(CubeScriptParser.ModifierContext,0)


        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CubeScriptParser.ParamContext)
            else:
                return self.getTypedRuleContext(CubeScriptParser.ParamContext,i)


        def getRuleIndex(self):
            return CubeScriptParser.RULE_functiondefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctiondefinition" ):
                listener.enterFunctiondefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctiondefinition" ):
                listener.exitFunctiondefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctiondefinition" ):
                return visitor.visitFunctiondefinition(self)
            else:
                return visitor.visitChildren(self)




    def functiondefinition(self):

        localctx = CubeScriptParser.FunctiondefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_functiondefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4026531840) != 0):
                self.state = 383
                self.modifier()


            self.state = 386
            self.match(CubeScriptParser.T__16)
            self.state = 387
            self.match(CubeScriptParser.IDENTIFIER)
            self.state = 388
            self.match(CubeScriptParser.T__3)
            self.state = 397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 389
                self.param()
                self.state = 394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 390
                    self.match(CubeScriptParser.T__14)
                    self.state = 391
                    self.param()
                    self.state = 396
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 399
            self.match(CubeScriptParser.T__5)
            self.state = 400
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(CubeScriptParser.TYPE, 0)

        def IDENTIFIER(self):
            return self.getToken(CubeScriptParser.IDENTIFIER, 0)

        def ARRAY(self):
            return self.getToken(CubeScriptParser.ARRAY, 0)

        def expression(self):
            return self.getTypedRuleContext(CubeScriptParser.ExpressionContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(CubeScriptParser.FunctionCallContext,0)


        def getRuleIndex(self):
            return CubeScriptParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = CubeScriptParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_param)
        try:
            self.state = 424
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 402
                self.match(CubeScriptParser.TYPE)
                self.state = 403
                self.match(CubeScriptParser.IDENTIFIER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 404
                self.match(CubeScriptParser.TYPE)
                self.state = 405
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 406
                self.match(CubeScriptParser.ARRAY)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 407
                self.match(CubeScriptParser.TYPE)
                self.state = 408
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 409
                self.match(CubeScriptParser.ARRAY)
                self.state = 410
                self.match(CubeScriptParser.T__7)
                self.state = 411
                self.expression(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 412
                self.match(CubeScriptParser.TYPE)
                self.state = 413
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 414
                self.match(CubeScriptParser.T__7)
                self.state = 415
                self.expression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 416
                self.match(CubeScriptParser.TYPE)
                self.state = 417
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 418
                self.match(CubeScriptParser.T__7)
                self.state = 419
                self.functionCall()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 420
                self.match(CubeScriptParser.TYPE)
                self.state = 421
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 422
                self.match(CubeScriptParser.T__7)
                self.state = 423
                self.functionCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(CubeScriptParser.IDENTIFIER, 0)

        def expression(self):
            return self.getTypedRuleContext(CubeScriptParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CubeScriptParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment" ):
                return visitor.visitAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assignment(self):

        localctx = CubeScriptParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self.match(CubeScriptParser.IDENTIFIER)
            self.state = 427
            self.match(CubeScriptParser.T__7)
            self.state = 428
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(CubeScriptParser.IMPORT, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(CubeScriptParser.IDENTIFIER)
            else:
                return self.getToken(CubeScriptParser.IDENTIFIER, i)

        def getRuleIndex(self):
            return CubeScriptParser.RULE_usingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingStatement" ):
                listener.enterUsingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingStatement" ):
                listener.exitUsingStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingStatement" ):
                return visitor.visitUsingStatement(self)
            else:
                return visitor.visitChildren(self)




    def usingStatement(self):

        localctx = CubeScriptParser.UsingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_usingStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            self.match(CubeScriptParser.IMPORT)
            self.state = 431
            self.match(CubeScriptParser.IDENTIFIER)
            self.state = 436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==13:
                self.state = 432
                self.match(CubeScriptParser.T__12)
                self.state = 433
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 438
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 439
            self.match(CubeScriptParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CubeScriptParser.RULE_functionCall

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class VariblecallexprContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TYPE(self):
            return self.getToken(CubeScriptParser.TYPE, 0)
        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(CubeScriptParser.IDENTIFIER)
            else:
                return self.getToken(CubeScriptParser.IDENTIFIER, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CubeScriptParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CubeScriptParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariblecallexpr" ):
                listener.enterVariblecallexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariblecallexpr" ):
                listener.exitVariblecallexpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariblecallexpr" ):
                return visitor.visitVariblecallexpr(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallexprrContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(CubeScriptParser.IDENTIFIER)
            else:
                return self.getToken(CubeScriptParser.IDENTIFIER, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CubeScriptParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CubeScriptParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallexprr" ):
                listener.enterFunctionCallexprr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallexprr" ):
                listener.exitFunctionCallexprr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallexprr" ):
                return visitor.visitFunctionCallexprr(self)
            else:
                return visitor.visitChildren(self)



    def functionCall(self):

        localctx = CubeScriptParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_functionCall)
        self._la = 0 # Token type
        try:
            self.state = 501
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                localctx = CubeScriptParser.FunctionCallexprrContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 441
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 442
                self.match(CubeScriptParser.T__3)
                self.state = 451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611679417309985506) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                    self.state = 443
                    self.expression(0)
                    self.state = 448
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 444
                        self.match(CubeScriptParser.T__14)
                        self.state = 445
                        self.expression(0)
                        self.state = 450
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 453
                self.match(CubeScriptParser.T__5)
                pass

            elif la_ == 2:
                localctx = CubeScriptParser.FunctionCallexprrContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 454
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 455
                self.match(CubeScriptParser.T__12)
                self.state = 456
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 457
                self.match(CubeScriptParser.T__3)
                self.state = 466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611679417309985506) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                    self.state = 458
                    self.expression(0)
                    self.state = 463
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 459
                        self.match(CubeScriptParser.T__14)
                        self.state = 460
                        self.expression(0)
                        self.state = 465
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 468
                self.match(CubeScriptParser.T__5)
                pass

            elif la_ == 3:
                localctx = CubeScriptParser.VariblecallexprContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 469
                self.match(CubeScriptParser.TYPE)
                self.state = 470
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 471
                self.match(CubeScriptParser.T__7)
                self.state = 472
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 473
                self.match(CubeScriptParser.T__3)
                self.state = 482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611679417309985506) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                    self.state = 474
                    self.expression(0)
                    self.state = 479
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 475
                        self.match(CubeScriptParser.T__14)
                        self.state = 476
                        self.expression(0)
                        self.state = 481
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 484
                self.match(CubeScriptParser.T__5)
                self.state = 485
                self.match(CubeScriptParser.T__8)
                pass

            elif la_ == 4:
                localctx = CubeScriptParser.FunctionCallexprrContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 486
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 487
                self.match(CubeScriptParser.T__3)
                self.state = 496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611679417309985506) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                    self.state = 488
                    self.expression(0)
                    self.state = 493
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 489
                        self.match(CubeScriptParser.T__14)
                        self.state = 490
                        self.expression(0)
                        self.state = 495
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 498
                self.match(CubeScriptParser.T__5)
                self.state = 499
                self.match(CubeScriptParser.T__12)
                self.state = 500
                self.match(CubeScriptParser.IDENTIFIER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def line(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CubeScriptParser.LineContext)
            else:
                return self.getTypedRuleContext(CubeScriptParser.LineContext,i)


        def getRuleIndex(self):
            return CubeScriptParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = CubeScriptParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self.match(CubeScriptParser.T__10)
            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686014396529394) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 765) != 0):
                self.state = 504
                self.line()
                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 510
            self.match(CubeScriptParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CubeScriptParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class FunctionCallexprsContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(CubeScriptParser.IDENTIFIER)
            else:
                return self.getToken(CubeScriptParser.IDENTIFIER, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CubeScriptParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CubeScriptParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallexprs" ):
                listener.enterFunctionCallexprs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallexprs" ):
                listener.exitFunctionCallexprs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallexprs" ):
                return visitor.visitFunctionCallexprs(self)
            else:
                return visitor.visitChildren(self)


    class StatementexprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def statement(self):
            return self.getTypedRuleContext(CubeScriptParser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementexpr" ):
                listener.enterStatementexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementexpr" ):
                listener.exitStatementexpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementexpr" ):
                return visitor.visitStatementexpr(self)
            else:
                return visitor.visitChildren(self)


    class TernaryexprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CubeScriptParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CubeScriptParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTernaryexpr" ):
                listener.enterTernaryexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTernaryexpr" ):
                listener.exitTernaryexpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTernaryexpr" ):
                return visitor.visitTernaryexpr(self)
            else:
                return visitor.visitChildren(self)


    class IfstatementexprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ifStatement(self):
            return self.getTypedRuleContext(CubeScriptParser.IfStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfstatementexpr" ):
                listener.enterIfstatementexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfstatementexpr" ):
                listener.exitIfstatementexpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfstatementexpr" ):
                return visitor.visitIfstatementexpr(self)
            else:
                return visitor.visitChildren(self)


    class DotfunctionCallexprsContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(CubeScriptParser.IDENTIFIER)
            else:
                return self.getToken(CubeScriptParser.IDENTIFIER, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CubeScriptParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CubeScriptParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotfunctionCallexprs" ):
                listener.enterDotfunctionCallexprs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotfunctionCallexprs" ):
                listener.exitDotfunctionCallexprs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotfunctionCallexprs" ):
                return visitor.visitDotfunctionCallexprs(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallexprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(CubeScriptParser.FunctionCallContext,0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(CubeScriptParser.IDENTIFIER)
            else:
                return self.getToken(CubeScriptParser.IDENTIFIER, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CubeScriptParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CubeScriptParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallexpr" ):
                listener.enterFunctionCallexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallexpr" ):
                listener.exitFunctionCallexpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallexpr" ):
                return visitor.visitFunctionCallexpr(self)
            else:
                return visitor.visitChildren(self)


    class ConstantexprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(CubeScriptParser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantexpr" ):
                listener.enterConstantexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantexpr" ):
                listener.exitConstantexpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantexpr" ):
                return visitor.visitConstantexpr(self)
            else:
                return visitor.visitChildren(self)


    class ForeachblockexprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def foreachBlock(self):
            return self.getTypedRuleContext(CubeScriptParser.ForeachBlockContext,0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(CubeScriptParser.IDENTIFIER)
            else:
                return self.getToken(CubeScriptParser.IDENTIFIER, i)
        def block(self):
            return self.getTypedRuleContext(CubeScriptParser.BlockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeachblockexpr" ):
                listener.enterForeachblockexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeachblockexpr" ):
                listener.exitForeachblockexpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForeachblockexpr" ):
                return visitor.visitForeachblockexpr(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesisexprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(CubeScriptParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisexpr" ):
                listener.enterParenthesisexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisexpr" ):
                listener.exitParenthesisexpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesisexpr" ):
                return visitor.visitParenthesisexpr(self)
            else:
                return visitor.visitChildren(self)


    class DecrementexprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(CubeScriptParser.IDENTIFIER, 0)
        def constant(self):
            return self.getTypedRuleContext(CubeScriptParser.ConstantContext,0)

        def expression(self):
            return self.getTypedRuleContext(CubeScriptParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecrementexpr" ):
                listener.enterDecrementexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecrementexpr" ):
                listener.exitDecrementexpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecrementexpr" ):
                return visitor.visitDecrementexpr(self)
            else:
                return visitor.visitChildren(self)


    class IncrementexprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(CubeScriptParser.IDENTIFIER, 0)
        def constant(self):
            return self.getTypedRuleContext(CubeScriptParser.ConstantContext,0)

        def expression(self):
            return self.getTypedRuleContext(CubeScriptParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncrementexpr" ):
                listener.enterIncrementexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncrementexpr" ):
                listener.exitIncrementexpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncrementexpr" ):
                return visitor.visitIncrementexpr(self)
            else:
                return visitor.visitChildren(self)


    class NegationexprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(CubeScriptParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNegationexpr" ):
                listener.enterNegationexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNegationexpr" ):
                listener.exitNegationexpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNegationexpr" ):
                return visitor.visitNegationexpr(self)
            else:
                return visitor.visitChildren(self)


    class FunctiondefineexprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(CubeScriptParser.IDENTIFIER, 0)
        def block(self):
            return self.getTypedRuleContext(CubeScriptParser.BlockContext,0)

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CubeScriptParser.ParamContext)
            else:
                return self.getTypedRuleContext(CubeScriptParser.ParamContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctiondefineexpr" ):
                listener.enterFunctiondefineexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctiondefineexpr" ):
                listener.exitFunctiondefineexpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctiondefineexpr" ):
                return visitor.visitFunctiondefineexpr(self)
            else:
                return visitor.visitChildren(self)


    class IdentifiereexprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(CubeScriptParser.IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifiereexpr" ):
                listener.enterIdentifiereexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifiereexpr" ):
                listener.exitIdentifiereexpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifiereexpr" ):
                return visitor.visitIdentifiereexpr(self)
            else:
                return visitor.visitChildren(self)


    class DotexprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(CubeScriptParser.IDENTIFIER)
            else:
                return self.getToken(CubeScriptParser.IDENTIFIER, i)
        def expression(self):
            return self.getTypedRuleContext(CubeScriptParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotexpr" ):
                listener.enterDotexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotexpr" ):
                listener.exitDotexpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotexpr" ):
                return visitor.visitDotexpr(self)
            else:
                return visitor.visitChildren(self)


    class ArrayassignmentContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CubeScriptParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CubeScriptParser.ExpressionContext,i)

        def functionCall(self):
            return self.getTypedRuleContext(CubeScriptParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayassignment" ):
                listener.enterArrayassignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayassignment" ):
                listener.exitArrayassignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayassignment" ):
                return visitor.visitArrayassignment(self)
            else:
                return visitor.visitChildren(self)


    class ForblockexprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def forBlock(self):
            return self.getTypedRuleContext(CubeScriptParser.ForBlockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForblockexpr" ):
                listener.enterForblockexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForblockexpr" ):
                listener.exitForblockexpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForblockexpr" ):
                return visitor.visitForblockexpr(self)
            else:
                return visitor.visitChildren(self)


    class ArrayexprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CubeScriptParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CubeScriptParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayexpr" ):
                listener.enterArrayexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayexpr" ):
                listener.exitArrayexpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayexpr" ):
                return visitor.visitArrayexpr(self)
            else:
                return visitor.visitChildren(self)


    class SwitchblockexprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def switchBlock(self):
            return self.getTypedRuleContext(CubeScriptParser.SwitchBlockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchblockexpr" ):
                listener.enterSwitchblockexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchblockexpr" ):
                listener.exitSwitchblockexpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchblockexpr" ):
                return visitor.visitSwitchblockexpr(self)
            else:
                return visitor.visitChildren(self)


    class BinaryexprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CubeScriptParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CubeScriptParser.ExpressionContext,i)

        def multOp(self):
            return self.getTypedRuleContext(CubeScriptParser.MultOpContext,0)

        def addOp(self):
            return self.getTypedRuleContext(CubeScriptParser.AddOpContext,0)

        def cmpOp(self):
            return self.getTypedRuleContext(CubeScriptParser.CmpOpContext,0)

        def boolOp(self):
            return self.getTypedRuleContext(CubeScriptParser.BoolOpContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryexpr" ):
                listener.enterBinaryexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryexpr" ):
                listener.exitBinaryexpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryexpr" ):
                return visitor.visitBinaryexpr(self)
            else:
                return visitor.visitChildren(self)


    class WhileblockexprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CubeScriptParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def whileBlock(self):
            return self.getTypedRuleContext(CubeScriptParser.WhileBlockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileblockexpr" ):
                listener.enterWhileblockexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileblockexpr" ):
                listener.exitWhileblockexpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileblockexpr" ):
                return visitor.visitWhileblockexpr(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CubeScriptParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 48
        self.enterRecursionRule(localctx, 48, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                localctx = CubeScriptParser.ConstantexprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 513
                self.constant()
                pass

            elif la_ == 2:
                localctx = CubeScriptParser.FunctionCallexprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 514
                self.functionCall()
                pass

            elif la_ == 3:
                localctx = CubeScriptParser.ParenthesisexprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 515
                self.match(CubeScriptParser.T__3)
                self.state = 516
                self.expression(0)
                self.state = 517
                self.match(CubeScriptParser.T__5)
                pass

            elif la_ == 4:
                localctx = CubeScriptParser.IdentifiereexprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 519
                self.match(CubeScriptParser.IDENTIFIER)
                pass

            elif la_ == 5:
                localctx = CubeScriptParser.NegationexprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 520
                self.match(CubeScriptParser.T__40)
                self.state = 521
                self.expression(38)
                pass

            elif la_ == 6:
                localctx = CubeScriptParser.NegationexprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 522
                self.match(CubeScriptParser.T__41)
                self.state = 523
                self.expression(37)
                pass

            elif la_ == 7:
                localctx = CubeScriptParser.IncrementexprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 524
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 525
                self.match(CubeScriptParser.T__25)
                pass

            elif la_ == 8:
                localctx = CubeScriptParser.DecrementexprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 526
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 527
                self.match(CubeScriptParser.T__26)
                pass

            elif la_ == 9:
                localctx = CubeScriptParser.IncrementexprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 528
                self.constant()
                self.state = 529
                self.match(CubeScriptParser.T__25)
                pass

            elif la_ == 10:
                localctx = CubeScriptParser.DecrementexprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 531
                self.constant()
                self.state = 532
                self.match(CubeScriptParser.T__26)
                pass

            elif la_ == 11:
                localctx = CubeScriptParser.DotexprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 534
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 535
                self.match(CubeScriptParser.T__12)
                self.state = 536
                self.match(CubeScriptParser.IDENTIFIER)
                pass

            elif la_ == 12:
                localctx = CubeScriptParser.DotfunctionCallexprsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 537
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 538
                self.match(CubeScriptParser.T__12)
                self.state = 539
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 540
                self.match(CubeScriptParser.T__3)
                self.state = 549
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611679417309985506) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                    self.state = 541
                    self.expression(0)
                    self.state = 546
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 542
                        self.match(CubeScriptParser.T__14)
                        self.state = 543
                        self.expression(0)
                        self.state = 548
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 551
                self.match(CubeScriptParser.T__5)
                pass

            elif la_ == 13:
                localctx = CubeScriptParser.IdentifiereexprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 552
                self.match(CubeScriptParser.IDENTIFIER)
                pass

            elif la_ == 14:
                localctx = CubeScriptParser.FunctionCallexprsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 553
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 554
                self.match(CubeScriptParser.T__3)
                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611679417309985506) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                    self.state = 555
                    self.expression(0)
                    self.state = 560
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 556
                        self.match(CubeScriptParser.T__14)
                        self.state = 557
                        self.expression(0)
                        self.state = 562
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 565
                self.match(CubeScriptParser.T__5)
                pass

            elif la_ == 15:
                localctx = CubeScriptParser.FunctionCallexprsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 566
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 567
                self.match(CubeScriptParser.T__3)
                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611679417309985506) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                    self.state = 568
                    self.expression(0)
                    self.state = 573
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 569
                        self.match(CubeScriptParser.T__14)
                        self.state = 570
                        self.expression(0)
                        self.state = 575
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 578
                self.match(CubeScriptParser.T__5)
                self.state = 579
                self.match(CubeScriptParser.T__12)
                self.state = 580
                self.match(CubeScriptParser.IDENTIFIER)
                pass

            elif la_ == 16:
                localctx = CubeScriptParser.FunctionCallexprsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 581
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 582
                self.match(CubeScriptParser.T__3)
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611679417309985506) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                    self.state = 583
                    self.expression(0)
                    self.state = 588
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 584
                        self.match(CubeScriptParser.T__14)
                        self.state = 585
                        self.expression(0)
                        self.state = 590
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 593
                self.match(CubeScriptParser.T__5)
                self.state = 594
                self.match(CubeScriptParser.T__12)
                self.state = 595
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 596
                self.match(CubeScriptParser.T__3)
                self.state = 605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611679417309985506) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                    self.state = 597
                    self.expression(0)
                    self.state = 602
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 598
                        self.match(CubeScriptParser.T__14)
                        self.state = 599
                        self.expression(0)
                        self.state = 604
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 607
                self.match(CubeScriptParser.T__5)
                pass

            elif la_ == 17:
                localctx = CubeScriptParser.FunctionCallexprsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 608
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 609
                self.match(CubeScriptParser.T__3)
                self.state = 618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611679417309985506) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                    self.state = 610
                    self.expression(0)
                    self.state = 615
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 611
                        self.match(CubeScriptParser.T__14)
                        self.state = 612
                        self.expression(0)
                        self.state = 617
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 620
                self.match(CubeScriptParser.T__5)
                self.state = 621
                self.match(CubeScriptParser.T__12)
                self.state = 622
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 623
                self.match(CubeScriptParser.T__3)
                self.state = 632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611679417309985506) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                    self.state = 624
                    self.expression(0)
                    self.state = 629
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 625
                        self.match(CubeScriptParser.T__14)
                        self.state = 626
                        self.expression(0)
                        self.state = 631
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 634
                self.match(CubeScriptParser.T__5)
                self.state = 635
                self.match(CubeScriptParser.T__12)
                self.state = 636
                self.match(CubeScriptParser.IDENTIFIER)
                pass

            elif la_ == 18:
                localctx = CubeScriptParser.FunctionCallexprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 637
                self.functionCall()
                pass

            elif la_ == 19:
                localctx = CubeScriptParser.FunctionCallexprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 638
                self.functionCall()
                self.state = 639
                self.match(CubeScriptParser.T__12)
                self.state = 640
                self.match(CubeScriptParser.IDENTIFIER)
                pass

            elif la_ == 20:
                localctx = CubeScriptParser.FunctionCallexprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 642
                self.functionCall()
                self.state = 643
                self.match(CubeScriptParser.T__12)
                self.state = 644
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 645
                self.match(CubeScriptParser.T__3)
                self.state = 654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611679417309985506) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                    self.state = 646
                    self.expression(0)
                    self.state = 651
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 647
                        self.match(CubeScriptParser.T__14)
                        self.state = 648
                        self.expression(0)
                        self.state = 653
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 656
                self.match(CubeScriptParser.T__5)
                pass

            elif la_ == 21:
                localctx = CubeScriptParser.FunctionCallexprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 658
                self.functionCall()
                self.state = 659
                self.match(CubeScriptParser.T__12)
                self.state = 660
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 661
                self.match(CubeScriptParser.T__3)
                self.state = 670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611679417309985506) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                    self.state = 662
                    self.expression(0)
                    self.state = 667
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 663
                        self.match(CubeScriptParser.T__14)
                        self.state = 664
                        self.expression(0)
                        self.state = 669
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 672
                self.match(CubeScriptParser.T__5)
                self.state = 673
                self.match(CubeScriptParser.T__12)
                self.state = 674
                self.match(CubeScriptParser.IDENTIFIER)
                pass

            elif la_ == 22:
                localctx = CubeScriptParser.FunctionCallexprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 676
                self.functionCall()
                self.state = 677
                self.match(CubeScriptParser.T__12)
                self.state = 678
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 679
                self.match(CubeScriptParser.T__3)
                self.state = 688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611679417309985506) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                    self.state = 680
                    self.expression(0)
                    self.state = 685
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 681
                        self.match(CubeScriptParser.T__14)
                        self.state = 682
                        self.expression(0)
                        self.state = 687
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 690
                self.match(CubeScriptParser.T__5)
                self.state = 691
                self.match(CubeScriptParser.T__12)
                self.state = 692
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 693
                self.match(CubeScriptParser.T__3)
                self.state = 702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611679417309985506) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                    self.state = 694
                    self.expression(0)
                    self.state = 699
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 695
                        self.match(CubeScriptParser.T__14)
                        self.state = 696
                        self.expression(0)
                        self.state = 701
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 704
                self.match(CubeScriptParser.T__5)
                pass

            elif la_ == 23:
                localctx = CubeScriptParser.FunctionCallexprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 706
                self.functionCall()
                self.state = 707
                self.match(CubeScriptParser.T__12)
                self.state = 708
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 709
                self.match(CubeScriptParser.T__3)
                self.state = 718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611679417309985506) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                    self.state = 710
                    self.expression(0)
                    self.state = 715
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 711
                        self.match(CubeScriptParser.T__14)
                        self.state = 712
                        self.expression(0)
                        self.state = 717
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 720
                self.match(CubeScriptParser.T__5)
                self.state = 721
                self.match(CubeScriptParser.T__12)
                self.state = 722
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 723
                self.match(CubeScriptParser.T__3)
                self.state = 732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611679417309985506) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                    self.state = 724
                    self.expression(0)
                    self.state = 729
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 725
                        self.match(CubeScriptParser.T__14)
                        self.state = 726
                        self.expression(0)
                        self.state = 731
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 734
                self.match(CubeScriptParser.T__5)
                self.state = 735
                self.match(CubeScriptParser.T__12)
                self.state = 736
                self.match(CubeScriptParser.IDENTIFIER)
                pass

            elif la_ == 24:
                localctx = CubeScriptParser.StatementexprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 738
                self.statement()
                pass

            elif la_ == 25:
                localctx = CubeScriptParser.IfstatementexprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 739
                self.ifStatement()
                pass

            elif la_ == 26:
                localctx = CubeScriptParser.SwitchblockexprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 740
                self.switchBlock()
                pass

            elif la_ == 27:
                localctx = CubeScriptParser.WhileblockexprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 741
                self.whileBlock()
                pass

            elif la_ == 28:
                localctx = CubeScriptParser.ForblockexprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 742
                self.forBlock()
                pass

            elif la_ == 29:
                localctx = CubeScriptParser.ForeachblockexprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 743
                self.foreachBlock()
                pass

            elif la_ == 30:
                localctx = CubeScriptParser.ForeachblockexprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 744
                self.match(CubeScriptParser.T__2)
                self.state = 745
                self.match(CubeScriptParser.T__3)
                self.state = 746
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 747
                self.match(CubeScriptParser.T__4)
                self.state = 748
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 749
                self.match(CubeScriptParser.T__5)
                self.state = 750
                self.block()
                pass

            elif la_ == 31:
                localctx = CubeScriptParser.FunctiondefineexprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 751
                self.match(CubeScriptParser.T__16)
                self.state = 752
                self.match(CubeScriptParser.IDENTIFIER)
                self.state = 753
                self.match(CubeScriptParser.T__3)
                self.state = 762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==71:
                    self.state = 754
                    self.param()
                    self.state = 759
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 755
                        self.match(CubeScriptParser.T__14)
                        self.state = 756
                        self.param()
                        self.state = 761
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 764
                self.match(CubeScriptParser.T__5)
                self.state = 765
                self.block()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 861
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 859
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                    if la_ == 1:
                        localctx = CubeScriptParser.BinaryexprContext(self, CubeScriptParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 768
                        if not self.precpred(self._ctx, 42):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 42)")
                        self.state = 769
                        self.multOp()
                        self.state = 770
                        self.expression(43)
                        pass

                    elif la_ == 2:
                        localctx = CubeScriptParser.BinaryexprContext(self, CubeScriptParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 772
                        if not self.precpred(self._ctx, 41):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 41)")
                        self.state = 773
                        self.addOp()
                        self.state = 774
                        self.expression(42)
                        pass

                    elif la_ == 3:
                        localctx = CubeScriptParser.BinaryexprContext(self, CubeScriptParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 776
                        if not self.precpred(self._ctx, 40):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 40)")
                        self.state = 777
                        self.cmpOp()
                        self.state = 778
                        self.expression(41)
                        pass

                    elif la_ == 4:
                        localctx = CubeScriptParser.BinaryexprContext(self, CubeScriptParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 780
                        if not self.precpred(self._ctx, 39):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 39)")
                        self.state = 781
                        self.boolOp()
                        self.state = 782
                        self.expression(40)
                        pass

                    elif la_ == 5:
                        localctx = CubeScriptParser.TernaryexprContext(self, CubeScriptParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 784
                        if not self.precpred(self._ctx, 36):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 36)")
                        self.state = 785
                        self.match(CubeScriptParser.T__42)
                        self.state = 786
                        self.expression(0)
                        self.state = 787
                        self.match(CubeScriptParser.T__18)
                        self.state = 788
                        self.expression(37)
                        pass

                    elif la_ == 6:
                        localctx = CubeScriptParser.ArrayassignmentContext(self, CubeScriptParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 790
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 791
                        self.match(CubeScriptParser.T__13)
                        self.state = 793
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611679417309985506) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                            self.state = 792
                            self.expression(0)


                        self.state = 795
                        self.match(CubeScriptParser.T__15)
                        self.state = 796
                        self.match(CubeScriptParser.T__7)
                        self.state = 797
                        self.expression(26)
                        pass

                    elif la_ == 7:
                        localctx = CubeScriptParser.ArrayassignmentContext(self, CubeScriptParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 798
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 799
                        self.match(CubeScriptParser.T__10)
                        self.state = 801
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611679417309985506) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                            self.state = 800
                            self.expression(0)


                        self.state = 803
                        self.match(CubeScriptParser.T__11)
                        self.state = 804
                        self.match(CubeScriptParser.T__7)
                        self.state = 805
                        self.expression(24)
                        pass

                    elif la_ == 8:
                        localctx = CubeScriptParser.DotexprContext(self, CubeScriptParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 806
                        if not self.precpred(self._ctx, 35):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 35)")
                        self.state = 807
                        self.match(CubeScriptParser.T__12)
                        self.state = 808
                        self.match(CubeScriptParser.IDENTIFIER)
                        pass

                    elif la_ == 9:
                        localctx = CubeScriptParser.DotfunctionCallexprsContext(self, CubeScriptParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 809
                        if not self.precpred(self._ctx, 34):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 34)")
                        self.state = 810
                        self.match(CubeScriptParser.T__12)
                        self.state = 811
                        self.match(CubeScriptParser.IDENTIFIER)
                        self.state = 812
                        self.match(CubeScriptParser.T__3)
                        self.state = 821
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611679417309985506) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                            self.state = 813
                            self.expression(0)
                            self.state = 818
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==15:
                                self.state = 814
                                self.match(CubeScriptParser.T__14)
                                self.state = 815
                                self.expression(0)
                                self.state = 820
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)



                        self.state = 823
                        self.match(CubeScriptParser.T__5)
                        pass

                    elif la_ == 10:
                        localctx = CubeScriptParser.ArrayexprContext(self, CubeScriptParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 824
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 825
                        self.match(CubeScriptParser.T__13)
                        self.state = 827
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611679417309985506) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                            self.state = 826
                            self.expression(0)


                        self.state = 829
                        self.match(CubeScriptParser.T__15)
                        pass

                    elif la_ == 11:
                        localctx = CubeScriptParser.ArrayexprContext(self, CubeScriptParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 830
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 831
                        self.match(CubeScriptParser.T__10)
                        self.state = 833
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611679417309985506) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                            self.state = 832
                            self.expression(0)


                        self.state = 835
                        self.match(CubeScriptParser.T__11)
                        pass

                    elif la_ == 12:
                        localctx = CubeScriptParser.IncrementexprContext(self, CubeScriptParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 836
                        if not self.precpred(self._ctx, 31):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 31)")
                        self.state = 837
                        self.match(CubeScriptParser.T__25)
                        pass

                    elif la_ == 13:
                        localctx = CubeScriptParser.DecrementexprContext(self, CubeScriptParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 838
                        if not self.precpred(self._ctx, 30):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 30)")
                        self.state = 839
                        self.match(CubeScriptParser.T__26)
                        pass

                    elif la_ == 14:
                        localctx = CubeScriptParser.ArrayassignmentContext(self, CubeScriptParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 840
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 841
                        self.match(CubeScriptParser.T__13)
                        self.state = 843
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611679417309985506) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 191) != 0):
                            self.state = 842
                            self.expression(0)


                        self.state = 845
                        self.match(CubeScriptParser.T__15)
                        self.state = 846
                        self.match(CubeScriptParser.T__7)
                        self.state = 847
                        self.functionCall()
                        pass

                    elif la_ == 15:
                        localctx = CubeScriptParser.ArrayassignmentContext(self, CubeScriptParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 848
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 849
                        self.match(CubeScriptParser.T__10)
                        self.state = 853
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
                        while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1+1:
                                self.state = 850
                                self.expression(0) 
                            self.state = 855
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

                        self.state = 856
                        self.match(CubeScriptParser.T__11)
                        self.state = 857
                        self.match(CubeScriptParser.T__7)
                        self.state = 858
                        self.functionCall()
                        pass

             
                self.state = 863
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MultOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CubeScriptParser.RULE_multOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultOp" ):
                listener.enterMultOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultOp" ):
                listener.exitMultOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultOp" ):
                return visitor.visitMultOp(self)
            else:
                return visitor.visitChildren(self)




    def multOp(self):

        localctx = CubeScriptParser.MultOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_multOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 144097595889811712) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CubeScriptParser.RULE_addOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddOp" ):
                listener.enterAddOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddOp" ):
                listener.exitAddOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddOp" ):
                return visitor.visitAddOp(self)
            else:
                return visitor.visitChildren(self)




    def addOp(self):

        localctx = CubeScriptParser.AddOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_addOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            _la = self._input.LA(1)
            if not(_la==41 or _la==57):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmpOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CubeScriptParser.RULE_cmpOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmpOp" ):
                listener.enterCmpOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmpOp" ):
                listener.exitCmpOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmpOp" ):
                return visitor.visitCmpOp(self)
            else:
                return visitor.visitChildren(self)




    def cmpOp(self):

        localctx = CubeScriptParser.CmpOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_cmpOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4323455642275676320) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOL_OPERATOR(self):
            return self.getToken(CubeScriptParser.BOOL_OPERATOR, 0)

        def getRuleIndex(self):
            return CubeScriptParser.RULE_boolOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolOp" ):
                listener.enterBoolOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolOp" ):
                listener.exitBoolOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolOp" ):
                return visitor.visitBoolOp(self)
            else:
                return visitor.visitChildren(self)




    def boolOp(self):

        localctx = CubeScriptParser.BoolOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_boolOp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self.match(CubeScriptParser.BOOL_OPERATOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER(self):
            return self.getToken(CubeScriptParser.INTEGER, 0)

        def FLOAT(self):
            return self.getToken(CubeScriptParser.FLOAT, 0)

        def STRING(self):
            return self.getToken(CubeScriptParser.STRING, 0)

        def BOOL(self):
            return self.getToken(CubeScriptParser.BOOL, 0)

        def IDENTIFIER(self):
            return self.getToken(CubeScriptParser.IDENTIFIER, 0)

        def TYPE(self):
            return self.getToken(CubeScriptParser.TYPE, 0)

        def getRuleIndex(self):
            return CubeScriptParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant" ):
                return visitor.visitConstant(self)
            else:
                return visitor.visitChildren(self)




    def constant(self):

        localctx = CubeScriptParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 872
            _la = self._input.LA(1)
            if not(((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 187) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[24] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 42)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 41)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 40)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 39)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 36)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 35)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 34)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 31)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 30)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 22)
         




