# Generated from CubeScript.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,56,442,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,
        1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,
        13,1,13,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,
        18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,
        24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,
        29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,
        33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,
        37,1,37,1,37,1,38,1,38,1,38,1,38,5,38,221,8,38,10,38,12,38,224,9,
        38,1,38,1,38,1,38,1,38,5,38,230,8,38,10,38,12,38,233,9,38,1,38,1,
        38,1,38,1,38,5,38,239,8,38,10,38,12,38,242,9,38,3,38,244,8,38,1,
        38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,256,8,39,1,
        40,4,40,259,8,40,11,40,12,40,260,1,41,5,41,264,8,41,10,41,12,41,
        267,9,41,1,41,1,41,4,41,271,8,41,11,41,12,41,272,1,42,1,42,1,42,
        3,42,278,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,45,1,45,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,3,46,309,8,46,1,47,1,47,1,47,5,47,
        314,8,47,10,47,12,47,317,9,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,
        1,48,1,48,1,48,1,48,3,48,330,8,48,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,386,8,49,1,50,
        1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,
        1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,
        1,57,1,58,4,58,430,8,58,11,58,12,58,431,1,58,1,58,1,59,1,59,5,59,
        438,8,59,10,59,12,59,441,9,59,1,231,0,60,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
        79,40,81,41,83,42,85,0,87,0,89,0,91,0,93,43,95,44,97,45,99,46,101,
        47,103,48,105,49,107,50,109,51,111,52,113,53,115,54,117,55,119,56,
        1,0,8,2,0,10,10,13,13,1,0,48,57,8,0,34,34,47,47,92,92,98,98,102,
        102,110,110,114,114,116,116,3,0,48,57,65,70,97,102,3,0,0,31,34,34,
        92,92,3,0,9,10,13,13,32,32,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
        95,95,97,122,464,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
        0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
        0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
        0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,
        0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,
        0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,
        0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,
        1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,1,121,1,0,0,0,3,123,1,0,0,0,
        5,125,1,0,0,0,7,127,1,0,0,0,9,129,1,0,0,0,11,131,1,0,0,0,13,133,
        1,0,0,0,15,135,1,0,0,0,17,137,1,0,0,0,19,139,1,0,0,0,21,141,1,0,
        0,0,23,143,1,0,0,0,25,145,1,0,0,0,27,147,1,0,0,0,29,150,1,0,0,0,
        31,153,1,0,0,0,33,155,1,0,0,0,35,157,1,0,0,0,37,159,1,0,0,0,39,163,
        1,0,0,0,41,165,1,0,0,0,43,167,1,0,0,0,45,169,1,0,0,0,47,171,1,0,
        0,0,49,174,1,0,0,0,51,177,1,0,0,0,53,179,1,0,0,0,55,181,1,0,0,0,
        57,184,1,0,0,0,59,187,1,0,0,0,61,190,1,0,0,0,63,193,1,0,0,0,65,196,
        1,0,0,0,67,198,1,0,0,0,69,201,1,0,0,0,71,204,1,0,0,0,73,207,1,0,
        0,0,75,210,1,0,0,0,77,243,1,0,0,0,79,255,1,0,0,0,81,258,1,0,0,0,
        83,265,1,0,0,0,85,274,1,0,0,0,87,279,1,0,0,0,89,285,1,0,0,0,91,287,
        1,0,0,0,93,308,1,0,0,0,95,310,1,0,0,0,97,329,1,0,0,0,99,385,1,0,
        0,0,101,387,1,0,0,0,103,393,1,0,0,0,105,396,1,0,0,0,107,401,1,0,
        0,0,109,405,1,0,0,0,111,412,1,0,0,0,113,419,1,0,0,0,115,422,1,0,
        0,0,117,429,1,0,0,0,119,435,1,0,0,0,121,122,5,61,0,0,122,2,1,0,0,
        0,123,124,5,59,0,0,124,4,1,0,0,0,125,126,5,40,0,0,126,6,1,0,0,0,
        127,128,5,41,0,0,128,8,1,0,0,0,129,130,5,123,0,0,130,10,1,0,0,0,
        131,132,5,125,0,0,132,12,1,0,0,0,133,134,5,44,0,0,134,14,1,0,0,0,
        135,136,5,62,0,0,136,16,1,0,0,0,137,138,5,46,0,0,138,18,1,0,0,0,
        139,140,5,63,0,0,140,20,1,0,0,0,141,142,5,58,0,0,142,22,1,0,0,0,
        143,144,5,91,0,0,144,24,1,0,0,0,145,146,5,93,0,0,146,26,1,0,0,0,
        147,148,5,43,0,0,148,149,5,43,0,0,149,28,1,0,0,0,150,151,5,45,0,
        0,151,152,5,45,0,0,152,30,1,0,0,0,153,154,5,33,0,0,154,32,1,0,0,
        0,155,156,5,45,0,0,156,34,1,0,0,0,157,158,5,43,0,0,158,36,1,0,0,
        0,159,160,5,110,0,0,160,161,5,101,0,0,161,162,5,119,0,0,162,38,1,
        0,0,0,163,164,5,42,0,0,164,40,1,0,0,0,165,166,5,47,0,0,166,42,1,
        0,0,0,167,168,5,37,0,0,168,44,1,0,0,0,169,170,5,94,0,0,170,46,1,
        0,0,0,171,172,5,60,0,0,172,173,5,60,0,0,173,48,1,0,0,0,174,175,5,
        62,0,0,175,176,5,62,0,0,176,50,1,0,0,0,177,178,5,38,0,0,178,52,1,
        0,0,0,179,180,5,124,0,0,180,54,1,0,0,0,181,182,5,38,0,0,182,183,
        5,38,0,0,183,56,1,0,0,0,184,185,5,124,0,0,185,186,5,124,0,0,186,
        58,1,0,0,0,187,188,5,43,0,0,188,189,5,61,0,0,189,60,1,0,0,0,190,
        191,5,45,0,0,191,192,5,61,0,0,192,62,1,0,0,0,193,194,5,42,0,0,194,
        195,5,61,0,0,195,64,1,0,0,0,196,197,5,60,0,0,197,66,1,0,0,0,198,
        199,5,60,0,0,199,200,5,61,0,0,200,68,1,0,0,0,201,202,5,62,0,0,202,
        203,5,61,0,0,203,70,1,0,0,0,204,205,5,61,0,0,205,206,5,61,0,0,206,
        72,1,0,0,0,207,208,5,33,0,0,208,209,5,61,0,0,209,74,1,0,0,0,210,
        211,5,115,0,0,211,212,5,116,0,0,212,213,5,111,0,0,213,214,5,112,
        0,0,214,215,5,59,0,0,215,76,1,0,0,0,216,217,5,47,0,0,217,218,5,47,
        0,0,218,222,1,0,0,0,219,221,8,0,0,0,220,219,1,0,0,0,221,224,1,0,
        0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,244,1,0,0,0,224,222,1,0,
        0,0,225,226,5,47,0,0,226,227,5,42,0,0,227,231,1,0,0,0,228,230,9,
        0,0,0,229,228,1,0,0,0,230,233,1,0,0,0,231,232,1,0,0,0,231,229,1,
        0,0,0,232,234,1,0,0,0,233,231,1,0,0,0,234,235,5,42,0,0,235,244,5,
        47,0,0,236,240,5,35,0,0,237,239,8,0,0,0,238,237,1,0,0,0,239,242,
        1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,244,1,0,0,0,242,240,
        1,0,0,0,243,216,1,0,0,0,243,225,1,0,0,0,243,236,1,0,0,0,244,245,
        1,0,0,0,245,246,6,38,0,0,246,78,1,0,0,0,247,248,5,97,0,0,248,249,
        5,110,0,0,249,256,5,100,0,0,250,251,5,111,0,0,251,256,5,114,0,0,
        252,253,5,120,0,0,253,254,5,111,0,0,254,256,5,114,0,0,255,247,1,
        0,0,0,255,250,1,0,0,0,255,252,1,0,0,0,256,80,1,0,0,0,257,259,7,1,
        0,0,258,257,1,0,0,0,259,260,1,0,0,0,260,258,1,0,0,0,260,261,1,0,
        0,0,261,82,1,0,0,0,262,264,7,1,0,0,263,262,1,0,0,0,264,267,1,0,0,
        0,265,263,1,0,0,0,265,266,1,0,0,0,266,268,1,0,0,0,267,265,1,0,0,
        0,268,270,5,46,0,0,269,271,7,1,0,0,270,269,1,0,0,0,271,272,1,0,0,
        0,272,270,1,0,0,0,272,273,1,0,0,0,273,84,1,0,0,0,274,277,5,92,0,
        0,275,278,7,2,0,0,276,278,3,87,43,0,277,275,1,0,0,0,277,276,1,0,
        0,0,278,86,1,0,0,0,279,280,5,117,0,0,280,281,3,89,44,0,281,282,3,
        89,44,0,282,283,3,89,44,0,283,284,3,89,44,0,284,88,1,0,0,0,285,286,
        7,3,0,0,286,90,1,0,0,0,287,288,8,4,0,0,288,92,1,0,0,0,289,290,5,
        117,0,0,290,291,5,115,0,0,291,292,5,105,0,0,292,293,5,110,0,0,293,
        309,5,103,0,0,294,295,5,42,0,0,295,296,5,105,0,0,296,297,5,110,0,
        0,297,298,5,99,0,0,298,299,5,108,0,0,299,300,5,117,0,0,300,301,5,
        100,0,0,301,309,5,101,0,0,302,303,5,105,0,0,303,304,5,109,0,0,304,
        305,5,112,0,0,305,306,5,111,0,0,306,307,5,114,0,0,307,309,5,116,
        0,0,308,289,1,0,0,0,308,294,1,0,0,0,308,302,1,0,0,0,309,94,1,0,0,
        0,310,315,5,34,0,0,311,314,3,85,42,0,312,314,3,91,45,0,313,311,1,
        0,0,0,313,312,1,0,0,0,314,317,1,0,0,0,315,313,1,0,0,0,315,316,1,
        0,0,0,316,318,1,0,0,0,317,315,1,0,0,0,318,319,5,34,0,0,319,96,1,
        0,0,0,320,321,5,116,0,0,321,322,5,114,0,0,322,323,5,117,0,0,323,
        330,5,101,0,0,324,325,5,102,0,0,325,326,5,97,0,0,326,327,5,108,0,
        0,327,328,5,115,0,0,328,330,5,101,0,0,329,320,1,0,0,0,329,324,1,
        0,0,0,330,98,1,0,0,0,331,332,5,115,0,0,332,333,5,116,0,0,333,334,
        5,114,0,0,334,335,5,105,0,0,335,336,5,110,0,0,336,386,5,103,0,0,
        337,338,5,105,0,0,338,339,5,110,0,0,339,386,5,116,0,0,340,341,5,
        102,0,0,341,342,5,108,0,0,342,343,5,111,0,0,343,344,5,97,0,0,344,
        386,5,116,0,0,345,346,5,98,0,0,346,347,5,111,0,0,347,348,5,111,0,
        0,348,386,5,108,0,0,349,350,5,110,0,0,350,351,5,117,0,0,351,352,
        5,108,0,0,352,386,5,108,0,0,353,354,5,115,0,0,354,355,5,116,0,0,
        355,356,5,114,0,0,356,357,5,105,0,0,357,358,5,110,0,0,358,359,5,
        103,0,0,359,360,5,91,0,0,360,386,5,93,0,0,361,362,5,105,0,0,362,
        363,5,110,0,0,363,364,5,116,0,0,364,365,5,91,0,0,365,386,5,93,0,
        0,366,367,5,102,0,0,367,368,5,108,0,0,368,369,5,111,0,0,369,370,
        5,97,0,0,370,371,5,116,0,0,371,372,5,91,0,0,372,386,5,93,0,0,373,
        374,5,98,0,0,374,375,5,111,0,0,375,376,5,111,0,0,376,377,5,108,0,
        0,377,378,5,91,0,0,378,386,5,93,0,0,379,380,5,110,0,0,380,381,5,
        117,0,0,381,382,5,108,0,0,382,383,5,108,0,0,383,384,5,91,0,0,384,
        386,5,93,0,0,385,331,1,0,0,0,385,337,1,0,0,0,385,340,1,0,0,0,385,
        345,1,0,0,0,385,349,1,0,0,0,385,353,1,0,0,0,385,361,1,0,0,0,385,
        366,1,0,0,0,385,373,1,0,0,0,385,379,1,0,0,0,386,100,1,0,0,0,387,
        388,5,119,0,0,388,389,5,104,0,0,389,390,5,105,0,0,390,391,5,108,
        0,0,391,392,5,101,0,0,392,102,1,0,0,0,393,394,5,105,0,0,394,395,
        5,102,0,0,395,104,1,0,0,0,396,397,5,101,0,0,397,398,5,108,0,0,398,
        399,5,115,0,0,399,400,5,101,0,0,400,106,1,0,0,0,401,402,5,102,0,
        0,402,403,5,111,0,0,403,404,5,114,0,0,404,108,1,0,0,0,405,406,5,
        114,0,0,406,407,5,101,0,0,407,408,5,116,0,0,408,409,5,117,0,0,409,
        410,5,114,0,0,410,411,5,110,0,0,411,110,1,0,0,0,412,413,5,115,0,
        0,413,414,5,119,0,0,414,415,5,105,0,0,415,416,5,116,0,0,416,417,
        5,99,0,0,417,418,5,104,0,0,418,112,1,0,0,0,419,420,5,97,0,0,420,
        421,5,116,0,0,421,114,1,0,0,0,422,423,5,98,0,0,423,424,5,108,0,0,
        424,425,5,97,0,0,425,426,5,110,0,0,426,427,5,100,0,0,427,116,1,0,
        0,0,428,430,7,5,0,0,429,428,1,0,0,0,430,431,1,0,0,0,431,429,1,0,
        0,0,431,432,1,0,0,0,432,433,1,0,0,0,433,434,6,58,0,0,434,118,1,0,
        0,0,435,439,7,6,0,0,436,438,7,7,0,0,437,436,1,0,0,0,438,441,1,0,
        0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,120,1,0,0,0,441,439,1,0,
        0,0,17,0,222,231,240,243,255,260,265,272,277,308,313,315,329,385,
        431,439,1,6,0,0
    ]

class CubeScriptLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    Comment = 39
    BOOL_OPERATOR = 40
    INTEGER = 41
    FLOAT = 42
    IMPORT = 43
    STRING = 44
    BOOL = 45
    TYPE = 46
    WHILE = 47
    IF = 48
    ELSE = 49
    FOR = 50
    RETURN = 51
    SWITCH = 52
    CASE = 53
    DEFAULT = 54
    WS = 55
    IDENTIFIER = 56

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "';'", "'('", "')'", "'{'", "'}'", "','", "'>'", "'.'", 
            "'?'", "':'", "'['", "']'", "'++'", "'--'", "'!'", "'-'", "'+'", 
            "'new'", "'*'", "'/'", "'%'", "'^'", "'<<'", "'>>'", "'&'", 
            "'|'", "'&&'", "'||'", "'+='", "'-='", "'*='", "'<'", "'<='", 
            "'>='", "'=='", "'!='", "'stop;'", "'while'", "'if'", "'else'", 
            "'for'", "'return'", "'switch'", "'at'", "'bland'" ]

    symbolicNames = [ "<INVALID>",
            "Comment", "BOOL_OPERATOR", "INTEGER", "FLOAT", "IMPORT", "STRING", 
            "BOOL", "TYPE", "WHILE", "IF", "ELSE", "FOR", "RETURN", "SWITCH", 
            "CASE", "DEFAULT", "WS", "IDENTIFIER" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "Comment", "BOOL_OPERATOR", "INTEGER", "FLOAT", "ESC", 
                  "UNICODE", "HEX", "SAFE", "IMPORT", "STRING", "BOOL", 
                  "TYPE", "WHILE", "IF", "ELSE", "FOR", "RETURN", "SWITCH", 
                  "CASE", "DEFAULT", "WS", "IDENTIFIER" ]

    grammarFileName = "CubeScript.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


