{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "CubeScript",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#functioncalls"
		},
		{
			"include": "#namespaces"
		},
		{
			"include": "#classes"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#types"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"name": "keyword.control.cusp",
				"match": "\\b(if|while|for|return|at|bland|stop|struct|public|static|private)\\b"
			}]
		},
		"strings": {
			"name": "string.quoted.double.cusp",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.cusp",
					"match": "\\\\."
				}
			]
		},
		"comments": {
			"name": "comment.block.cusp",
			"begin": "/\\*",
			"end": "\\*/"
		},
		"import": {
			"name": "keyword.control.import.cusp",
			"match": "\\b(import|using|#include|require|use|mod)\\b"
		},
		"numbers": {
			"name": "constant.numeric.cusp",
			"match": "\\b[0-9]+\\b"
		},
		"operators": {
			"name": "keyword.operator.cusp",
			"match": "\\b(and|or|not|mod|div|shl|shr|xor|band|bor|bn)\\b"
		},
		"functions": {
			"name": "support.function.cusp",
			"match": "\\b(sin|cos|tan|asin|acos|atan|atan2|sqrt|abs|ceil|floor|round|log|exp|pow|rand|randseed|randrange|randrangei|randrangef|randrangev|randrangeiv|randrangef|randrangefv)\\b"
		},
		"functioncalls": {
			"name": "support.function.cusp",
			"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z0-9_]*)*)\\b\\("
		},
		"namespaces": {
			"name": "entity.name.namespace.cusp",
			"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z0-9_]*)*)\\b"
		},
		"classes": {
			"name": "entity.name.class.cusp",
			"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z0-9_]*)*)\\b"
		},
		"variables": {
			"name": "variable.other.cusp",
			"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
		},
		"constants": {
			"name": "constant.language.cusp",
			"match": "\\b(true|false|nil)\\b"
		},
		"types": {
			"name": "storage.type.cusp",
			"match": "\\b(int|float|bool|string|vec2|vec3|vec4|mat2|mat3|mat4|quat|entity|function|struct)\\b"
		}
	},
	"scopeName": "source.cusp"
}